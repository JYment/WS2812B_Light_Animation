
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  0080010e  0080010e  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d58  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000983  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080c  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078f  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	5c c0       	rjmp	.+184    	; 0x102 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 39       	cpi	r26, 0x9C	; 156
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e3 d0       	rcall	.+454    	; 0x28a <main>
  c4:	3d c1       	rjmp	.+634    	; 0x340 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <j_analogRead>:

char rx0_char(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  cc:	90 e4       	ldi	r25, 0x40	; 64
  ce:	29 9f       	mul	r18, r25
  d0:	90 01       	movw	r18, r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 71       	andi	r24, 0x1F	; 31
  d6:	28 2b       	or	r18, r24
  d8:	27 b9       	out	0x07, r18	; 7
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	86 b9       	out	0x06, r24	; 6
  de:	36 9a       	sbi	0x06, 6	; 6
  e0:	34 9b       	sbis	0x06, 4	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <j_analogRead+0x18>
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	25 b1       	in	r18, 0x05	; 5
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	92 2b       	or	r25, r18
  ec:	08 95       	ret

000000ee <init_uart0>:
  ee:	88 e9       	ldi	r24, 0x98	; 152
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  f8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	89 b9       	out	0x09, r24	; 9
 100:	08 95       	ret

00000102 <__vector_18>:

ISR(USART0_RX_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	int i;
	char rxdata;
	rxdata = UDR0;
 124:	8c b1       	in	r24, 0x0c	; 12
	if(!rx_flag)
 126:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 12a:	91 11       	cpse	r25, r1
 12c:	30 c0       	rjmp	.+96     	; 0x18e <__vector_18+0x8c>
	{
		if(rxdata == STX)
 12e:	8f 35       	cpi	r24, 0x5F	; 95
 130:	19 f4       	brne	.+6      	; 0x138 <__vector_18+0x36>
		{
			rx_cnt = 0;
 132:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_cnt>
 136:	2b c0       	rjmp	.+86     	; 0x18e <__vector_18+0x8c>
		}
		else if(rxdata == ETX)
 138:	8f 32       	cpi	r24, 0x2F	; 47
 13a:	e9 f4       	brne	.+58     	; 0x176 <__vector_18+0x74>
		{
			for(i=0; (i<rx_cnt) && (i < 6); i++)
 13c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 140:	88 23       	and	r24, r24
 142:	99 f0       	breq	.+38     	; 0x16a <__vector_18+0x68>
 144:	e8 e8       	ldi	r30, 0x88	; 136
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	a4 e7       	ldi	r26, 0x74	; 116
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 57       	subi	r24, 0x78	; 120
 150:	9e 4f       	sbci	r25, 0xFE	; 254
 152:	4e e8       	ldi	r20, 0x8E	; 142
 154:	51 e0       	ldi	r21, 0x01	; 1
			{
				tx_buf[i] = rx_buf[i];
				rx_buf[i] = ' ';
 156:	30 e2       	ldi	r19, 0x20	; 32
		}
		else if(rxdata == ETX)
		{
			for(i=0; (i<rx_cnt) && (i < 6); i++)
			{
				tx_buf[i] = rx_buf[i];
 158:	2c 91       	ld	r18, X
 15a:	21 93       	st	Z+, r18
				rx_buf[i] = ' ';
 15c:	3d 93       	st	X+, r19
		{
			rx_cnt = 0;
		}
		else if(rxdata == ETX)
		{
			for(i=0; (i<rx_cnt) && (i < 6); i++)
 15e:	e8 17       	cp	r30, r24
 160:	f9 07       	cpc	r31, r25
 162:	19 f0       	breq	.+6      	; 0x16a <__vector_18+0x68>
 164:	e4 17       	cp	r30, r20
 166:	f5 07       	cpc	r31, r21
 168:	b9 f7       	brne	.-18     	; 0x158 <__vector_18+0x56>
			{
				tx_buf[i] = rx_buf[i];
				rx_buf[i] = ' ';
			}
			rx_cnt = 0;
 16a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_cnt>
			rx_flag = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 174:	0c c0       	rjmp	.+24     	; 0x18e <__vector_18+0x8c>
		}
		else
		{
			if(rx_cnt < 10)
 176:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rx_cnt>
 17a:	9a 30       	cpi	r25, 0x0A	; 10
 17c:	40 f4       	brcc	.+16     	; 0x18e <__vector_18+0x8c>
			{
				rx_buf[rx_cnt] = rxdata;
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 58       	subi	r30, 0x8C	; 140
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 83       	st	Z, r24
				rx_cnt++;
 188:	9f 5f       	subi	r25, 0xFF	; 255
 18a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rx_cnt>
			}
		}
	}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0b be       	out	0x3b, r0	; 59
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <display_FND>:
#include "128_UART.h"

char temp[100];

void display_FND(int value)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	68 97       	sbiw	r28, 0x18	; 24
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	9c 01       	movw	r18, r24
	char digit[12] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67, 0x00, 0x40};
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	e1 e0       	ldi	r30, 0x01	; 1
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	de 01       	movw	r26, r28
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	01 90       	ld	r0, Z+
 1d2:	0d 92       	st	X+, r0
 1d4:	8a 95       	dec	r24
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <display_FND+0x20>
	char fnd_sel[4] = {0x01, 0x02, 0x04, 0x08};
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	8d 87       	std	Y+13, r24	; 0x0d
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	8e 87       	std	Y+14, r24	; 0x0e
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	8f 87       	std	Y+15, r24	; 0x0f
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	88 8b       	std	Y+16, r24	; 0x10
	int num[4], i;
	
	if(value < 0)
 1e8:	33 23       	and	r19, r19
 1ea:	44 f4       	brge	.+16     	; 0x1fc <display_FND+0x4c>
	{
		num[3] = 11;				// 음수인 경우는 ‘-’ 디스플레이
 1ec:	8b e0       	ldi	r24, 0x0B	; 11
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	98 8f       	std	Y+24, r25	; 0x18
 1f2:	8f 8b       	std	Y+23, r24	; 0x17
		value = (~value)+1;			// 2’s Compliment (절대값)
 1f4:	31 95       	neg	r19
 1f6:	21 95       	neg	r18
 1f8:	31 09       	sbc	r19, r1
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <display_FND+0x58>
	}
	else
	{
		num[3] = value / 1000;
 1fc:	c9 01       	movw	r24, r18
 1fe:	68 ee       	ldi	r22, 0xE8	; 232
 200:	73 e0       	ldi	r23, 0x03	; 3
 202:	77 d0       	rcall	.+238    	; 0x2f2 <__divmodhi4>
 204:	78 8f       	std	Y+24, r23	; 0x18
 206:	6f 8b       	std	Y+23, r22	; 0x17
	}
	num[2] = (value / 100) % 10;
 208:	c9 01       	movw	r24, r18
 20a:	64 e6       	ldi	r22, 0x64	; 100
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	71 d0       	rcall	.+226    	; 0x2f2 <__divmodhi4>
 210:	cb 01       	movw	r24, r22
 212:	ea e0       	ldi	r30, 0x0A	; 10
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	bf 01       	movw	r22, r30
 218:	6c d0       	rcall	.+216    	; 0x2f2 <__divmodhi4>
 21a:	9e 8b       	std	Y+22, r25	; 0x16
 21c:	8d 8b       	std	Y+21, r24	; 0x15
	num[1] = (value / 10) % 10;
 21e:	c9 01       	movw	r24, r18
 220:	bf 01       	movw	r22, r30
 222:	67 d0       	rcall	.+206    	; 0x2f2 <__divmodhi4>
 224:	9c 01       	movw	r18, r24
 226:	cb 01       	movw	r24, r22
 228:	bf 01       	movw	r22, r30
 22a:	63 d0       	rcall	.+198    	; 0x2f2 <__divmodhi4>
 22c:	9c 8b       	std	Y+20, r25	; 0x14
 22e:	8b 8b       	std	Y+19, r24	; 0x13
 230:	3a 8b       	std	Y+18, r19	; 0x12
	num[0] = value % 10;
 232:	29 8b       	std	Y+17, r18	; 0x11
 234:	de 01       	movw	r26, r28
 236:	51 96       	adiw	r26, 0x11	; 17
 238:	ce 01       	movw	r24, r28
 23a:	0d 96       	adiw	r24, 0x0d	; 13
 23c:	be 01       	movw	r22, r28
 23e:	67 5e       	subi	r22, 0xE7	; 231
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	45 e6       	ldi	r20, 0x65	; 101
	
	for(i=0; i<4; i++)
	{
		PORTC = digit[num[i]];
		PORTG = fnd_sel[i];
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	ed 91       	ld	r30, X+
	num[1] = (value / 10) % 10;
	num[0] = value % 10;
	
	for(i=0; i<4; i++)
	{
		PORTC = digit[num[i]];
 248:	fd 91       	ld	r31, X+
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	2c 0f       	add	r18, r28
 250:	3d 1f       	adc	r19, r29
 252:	e2 0f       	add	r30, r18
 254:	f3 1f       	adc	r31, r19
 256:	20 81       	ld	r18, Z
 258:	25 bb       	out	0x15, r18	; 21
 25a:	fc 01       	movw	r30, r24
		PORTG = fnd_sel[i];
 25c:	21 91       	ld	r18, Z+
 25e:	cf 01       	movw	r24, r30
 260:	fa 01       	movw	r30, r20
 262:	20 83       	st	Z, r18
 264:	af 9a       	sbi	0x15, 7	; 21
 		PORTC |= 0x80;
 266:	ef e3       	ldi	r30, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	ff e1       	ldi	r31, 0x1F	; 31
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <display_FND+0xba>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <display_FND+0xc0>
 270:	00 00       	nop
 272:	a6 17       	cp	r26, r22
	}
	num[2] = (value / 100) % 10;
	num[1] = (value / 10) % 10;
	num[0] = value % 10;
	
	for(i=0; i<4; i++)
 274:	b7 07       	cpc	r27, r23
 276:	39 f7       	brne	.-50     	; 0x246 <display_FND+0x96>
 278:	68 96       	adiw	r28, 0x18	; 24
		PORTC = digit[num[i]];
		PORTG = fnd_sel[i];
 		PORTC |= 0x80;
		_delay_ms(2);
	}
}
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:
 28a:	80 e0       	ldi	r24, 0x00	; 0


int main(void)
{
	int data;
	for(int i=0; i<8; i++)		j_pinMode('C', i, OUTPUT);
 28c:	90 e0       	ldi	r25, 0x00	; 0
{
	if(mode == OUTPUT)
	{
		if(port == 'A')			DDRA |= (1 << port_num);
		else if(port == 'B')	DDRB |= (1 << port_num);
		else if(port == 'C')	DDRC |= (1 << port_num);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	64 b3       	in	r22, 0x14	; 20
 294:	9a 01       	movw	r18, r20
 296:	08 2e       	mov	r0, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0x14>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <main+0x10>
 2a2:	26 2b       	or	r18, r22
 2a4:	24 bb       	out	0x14, r18	; 20
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	91 05       	cpc	r25, r1
 2ac:	91 f7       	brne	.-28     	; 0x292 <main+0x8>
		else if(port == 'D')	DDRD |= (1 << port_num);
		else if(port == 'E')	DDRE |= (1 << port_num);
		else if(port == 'F')	DDRF |= (1 << port_num);
		else if(port == 'G')	DDRG |= (1 << port_num);
 2ae:	e4 e6       	ldi	r30, 0x64	; 100
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 83       	st	Z, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	80 83       	st	Z, r24
 2be:	80 81       	ld	r24, Z
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	80 83       	st	Z, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	88 60       	ori	r24, 0x08	; 8
 2c8:	80 83       	st	Z, r24
	j_pinMode('G', 0, OUTPUT);
	j_pinMode('G', 1, OUTPUT);
	j_pinMode('G', 2, OUTPUT);
	j_pinMode('G', 3, OUTPUT);
	init_uart0();
 2ca:	11 df       	rcall	.-478    	; 0xee <init_uart0>
	sei();
 2cc:	78 94       	sei


int main(void)
{
	int data;
	for(int i=0; i<8; i++)		j_pinMode('C', i, OUTPUT);
 2ce:	c1 e0       	ldi	r28, 0x01	; 1
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <main+0x4c>
 2d4:	21 96       	adiw	r28, 0x01	; 1
	sei();
    while (1) 
    {
		for(int i=0; i<30; i++)
		{
			if(i == 0)		data = j_analogRead(0);
 2d6:	c1 30       	cpi	r28, 0x01	; 1
 2d8:	d1 05       	cpc	r29, r1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <main+0x5c>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	f4 de       	rcall	.-536    	; 0xc8 <j_analogRead>
			display_FND(data);
 2e0:	8c 01       	movw	r16, r24
 2e2:	66 df       	rcall	.-308    	; 0x1b0 <display_FND>
 2e4:	f7 cf       	rjmp	.-18     	; 0x2d4 <main+0x4a>
 2e6:	c8 01       	movw	r24, r16
 2e8:	63 df       	rcall	.-314    	; 0x1b0 <display_FND>
	j_pinMode('G', 3, OUTPUT);
	init_uart0();
	sei();
    while (1) 
    {
		for(int i=0; i<30; i++)
 2ea:	ce 31       	cpi	r28, 0x1E	; 30
 2ec:	d1 05       	cpc	r29, r1
 2ee:	94 f3       	brlt	.-28     	; 0x2d4 <main+0x4a>
 2f0:	ee cf       	rjmp	.-36     	; 0x2ce <main+0x44>

000002f2 <__divmodhi4>:
 2f2:	97 fb       	bst	r25, 7
 2f4:	07 2e       	mov	r0, r23
 2f6:	16 f4       	brtc	.+4      	; 0x2fc <__divmodhi4+0xa>
 2f8:	00 94       	com	r0
 2fa:	06 d0       	rcall	.+12     	; 0x308 <__divmodhi4_neg1>
 2fc:	77 fd       	sbrc	r23, 7
 2fe:	08 d0       	rcall	.+16     	; 0x310 <__divmodhi4_neg2>
 300:	0b d0       	rcall	.+22     	; 0x318 <__udivmodhi4>
 302:	07 fc       	sbrc	r0, 7
 304:	05 d0       	rcall	.+10     	; 0x310 <__divmodhi4_neg2>
 306:	3e f4       	brtc	.+14     	; 0x316 <__divmodhi4_exit>

00000308 <__divmodhi4_neg1>:
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__divmodhi4_neg2>:
 310:	70 95       	com	r23
 312:	61 95       	neg	r22
 314:	7f 4f       	sbci	r23, 0xFF	; 255

00000316 <__divmodhi4_exit>:
 316:	08 95       	ret

00000318 <__udivmodhi4>:
 318:	aa 1b       	sub	r26, r26
 31a:	bb 1b       	sub	r27, r27
 31c:	51 e1       	ldi	r21, 0x11	; 17
 31e:	07 c0       	rjmp	.+14     	; 0x32e <__udivmodhi4_ep>

00000320 <__udivmodhi4_loop>:
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	a6 17       	cp	r26, r22
 326:	b7 07       	cpc	r27, r23
 328:	10 f0       	brcs	.+4      	; 0x32e <__udivmodhi4_ep>
 32a:	a6 1b       	sub	r26, r22
 32c:	b7 0b       	sbc	r27, r23

0000032e <__udivmodhi4_ep>:
 32e:	88 1f       	adc	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	5a 95       	dec	r21
 334:	a9 f7       	brne	.-22     	; 0x320 <__udivmodhi4_loop>
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	bc 01       	movw	r22, r24
 33c:	cd 01       	movw	r24, r26
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>

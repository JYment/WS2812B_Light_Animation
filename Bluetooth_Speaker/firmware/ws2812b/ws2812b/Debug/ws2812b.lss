
ws2812b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d4  00800060  0000010a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800234  00800234  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007eb  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ed  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053b  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035a  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b2  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e0       	ldi	r30, 0x0A	; 10
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 33       	cpi	r26, 0x34	; 52
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a4 e3       	ldi	r26, 0x34	; 52
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 38       	cpi	r26, 0x82	; 130
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	18 d0       	rcall	.+48     	; 0x8a <main>
  5a:	55 c0       	rjmp	.+170    	; 0x106 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <byte_out>:
		byte_out(led_tbl[i][2]);			// B
// 		sprintf(temp, "%d  =  G:%d   R:%d\n", i, led_tbl[i][0], led_tbl[i][1]);
// 		tx0_str(temp);
	}
	_delay_ms(1);
}
  5e:	98 e0       	ldi	r25, 0x08	; 8
  60:	88 23       	and	r24, r24
  62:	5c f4       	brge	.+22     	; 0x7a <byte_out+0x1c>
  64:	c3 9a       	sbi	0x18, 3	; 24
	...
  76:	c3 98       	cbi	0x18, 3	; 24
  78:	04 c0       	rjmp	.+8      	; 0x82 <byte_out+0x24>
  7a:	c3 9a       	sbi	0x18, 3	; 24
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	c3 98       	cbi	0x18, 3	; 24
  82:	88 0f       	add	r24, r24
  84:	91 50       	subi	r25, 0x01	; 1
  86:	61 f7       	brne	.-40     	; 0x60 <byte_out+0x2>
  88:	08 95       	ret

0000008a <main>:


int main(void)
{
	int i, shift;
	DDRB = (1 << PB3);
  8a:	88 e0       	ldi	r24, 0x08	; 8
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	0f 2e       	mov	r0, r31
  90:	fa e4       	ldi	r31, 0x4A	; 74
  92:	cf 2e       	mov	r12, r31
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	df 2e       	mov	r13, r31
  98:	f0 2d       	mov	r31, r0
  9a:	02 e8       	ldi	r16, 0x82	; 130
  9c:	12 e0       	ldi	r17, 0x02	; 2
  9e:	0f 2e       	mov	r0, r31
  a0:	f0 e6       	ldi	r31, 0x60	; 96
  a2:	ef 2e       	mov	r14, r31
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ff 2e       	mov	r15, r31
  a8:	f0 2d       	mov	r31, r0
  aa:	28 c0       	rjmp	.+80     	; 0xfc <main+0x72>
    while (1) 
    {
		 for(shift=0; shift<78; shift++)
		 {
			 for(i=0;i<26;i++){ led[i][0]=led_tbl[i+shift][0]; led[i][1]=led_tbl[i+shift][1]; led[i][2]=led_tbl[i+shift][2]; }
  ac:	8c 91       	ld	r24, X
  ae:	80 83       	st	Z, r24
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	8c 91       	ld	r24, X
  b4:	11 97       	sbiw	r26, 0x01	; 1
  b6:	81 83       	std	Z+1, r24	; 0x01
  b8:	12 96       	adiw	r26, 0x02	; 2
  ba:	8c 91       	ld	r24, X
  bc:	12 97       	sbiw	r26, 0x02	; 2
  be:	82 83       	std	Z+2, r24	; 0x02
  c0:	13 96       	adiw	r26, 0x03	; 3
  c2:	33 96       	adiw	r30, 0x03	; 3
  c4:	e0 17       	cp	r30, r16
  c6:	f1 07       	cpc	r31, r17
  c8:	89 f7       	brne	.-30     	; 0xac <main+0x22>
			 for(i=0;i<26;i++){ byte_out(led[i][1]);           byte_out(led[i][0]);           byte_out(led[i][2]);           } //GRB
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	c8 df       	rcall	.-112    	; 0x5e <byte_out>
  ce:	88 81       	ld	r24, Y
  d0:	c6 df       	rcall	.-116    	; 0x5e <byte_out>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	c4 df       	rcall	.-120    	; 0x5e <byte_out>
  d6:	23 96       	adiw	r28, 0x03	; 3
  d8:	c0 17       	cp	r28, r16
  da:	d1 07       	cpc	r29, r17
  dc:	b1 f7       	brne	.-20     	; 0xca <main+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	80 e7       	ldi	r24, 0x70	; 112
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x5a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x64>
  ee:	00 00       	nop
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	e2 0e       	add	r14, r18
  f4:	f1 1c       	adc	r15, r1
{
	int i, shift;
	DDRB = (1 << PB3);
    while (1) 
    {
		 for(shift=0; shift<78; shift++)
  f6:	ce 14       	cp	r12, r14
  f8:	df 04       	cpc	r13, r15
  fa:	89 f2       	breq	.-94     	; 0x9e <main+0x14>
  fc:	c4 e3       	ldi	r28, 0x34	; 52
  fe:	d2 e0       	ldi	r29, 0x02	; 2
}



int main(void)
{
 100:	fe 01       	movw	r30, r28
 102:	d7 01       	movw	r26, r14
 104:	d3 cf       	rjmp	.-90     	; 0xac <main+0x22>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>

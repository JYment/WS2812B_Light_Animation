
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  0000081e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  008001f8  008001f8  000009aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ef  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a22  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed9  00000000  00000000  00002915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000037f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000782  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e99  00000000  00000000  000041e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000507b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3f       	cpi	r26, 0xF8	; 248
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 ef       	ldi	r26, 0xF8	; 248
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 03 	call	0x780	; 0x780 <main>
  9e:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ba:	08 95       	ret

000000bc <USART_Transmit_char>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit_char+0x4>
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	08 95       	ret

000000cc <__vector_18>:
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
  ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <rx_data>
  f6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <rx_cnt>
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	9e 0f       	add	r25, r30
  fe:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <rx_cnt>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e7 5f       	subi	r30, 0xF7	; 247
 106:	fd 4f       	sbci	r31, 0xFD	; 253
 108:	80 83       	st	Z, r24
 10a:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit_char>
 10e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rx_cnt>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	91 f4       	brne	.+36     	; 0x13a <__vector_18+0x6e>
 116:	ec e3       	ldi	r30, 0x3C	; 60
 118:	f2 e0       	ldi	r31, 0x02	; 2
 11a:	a9 e0       	ldi	r26, 0x09	; 9
 11c:	b2 e0       	ldi	r27, 0x02	; 2
 11e:	8d 91       	ld	r24, X+
 120:	9c 91       	ld	r25, X
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
 128:	12 96       	adiw	r26, 0x02	; 2
 12a:	8c 91       	ld	r24, X
 12c:	82 83       	std	Z+2, r24	; 0x02
 12e:	13 82       	std	Z+3, r1	; 0x03
 130:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <rx_cnt>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <__data_end>
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 15c:	9b 01       	movw	r18, r22
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	62 0f       	add	r22, r18
 164:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 166:	57 9a       	sbi	0x0a, 7	; 10
  
  masklo =~maskhi&ws2812_PORTREG;
 168:	2b b1       	in	r18, 0x0b	; 11
 16a:	2f 77       	andi	r18, 0x7F	; 127
  maskhi |=        ws2812_PORTREG;
 16c:	3b b1       	in	r19, 0x0b	; 11
 16e:	30 68       	ori	r19, 0x80	; 128
  
  sreg_prev=SREG;
 170:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 172:	f8 94       	cli

  while (datlen--) {
 174:	61 15       	cp	r22, r1
 176:	71 05       	cpc	r23, r1
 178:	b1 f0       	breq	.+44     	; 0x1a6 <loop54+0x22>
 17a:	fc 01       	movw	r30, r24
 17c:	68 0f       	add	r22, r24
 17e:	79 1f       	adc	r23, r25
    curbyte=*data++;
 180:	91 91       	ld	r25, Z+
    
    asm volatile(
 182:	88 e0       	ldi	r24, 0x08	; 8

00000184 <loop54>:
 184:	3b b9       	out	0x0b, r19	; 11
 186:	00 00       	nop
 188:	00 c0       	rjmp	.+0      	; 0x18a <loop54+0x6>
 18a:	97 ff       	sbrs	r25, 7
 18c:	2b b9       	out	0x0b, r18	; 11
 18e:	99 0f       	add	r25, r25
 190:	00 00       	nop
 192:	00 c0       	rjmp	.+0      	; 0x194 <loop54+0x10>
 194:	00 c0       	rjmp	.+0      	; 0x196 <loop54+0x12>
 196:	00 c0       	rjmp	.+0      	; 0x198 <loop54+0x14>
 198:	2b b9       	out	0x0b, r18	; 11
 19a:	00 c0       	rjmp	.+0      	; 0x19c <loop54+0x18>
 19c:	8a 95       	dec	r24
 19e:	91 f7       	brne	.-28     	; 0x184 <loop54>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 1a0:	e6 17       	cp	r30, r22
 1a2:	f7 07       	cpc	r31, r23
 1a4:	69 f7       	brne	.-38     	; 0x180 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 1a6:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f ea       	ldi	r24, 0xAF	; 175
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <loop54+0x28>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <loop54+0x2e>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <__vector_14>:
};

char temp[40];

ISR(TIMER0_COMPA_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
	time_cnt++;
 1c6:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <time_cnt>
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <time_cnt>
	if(time_cnt%20 == 0)		PORTB ^= (1 << PORTB5);
 1d0:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <time_cnt>
 1d4:	8d ec       	ldi	r24, 0xCD	; 205
 1d6:	28 9f       	mul	r18, r24
 1d8:	81 2d       	mov	r24, r1
 1da:	11 24       	eor	r1, r1
 1dc:	82 95       	swap	r24
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	88 0f       	add	r24, r24
 1e2:	88 0f       	add	r24, r24
 1e4:	98 2f       	mov	r25, r24
 1e6:	99 0f       	add	r25, r25
 1e8:	99 0f       	add	r25, r25
 1ea:	89 0f       	add	r24, r25
 1ec:	28 13       	cpse	r18, r24
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__vector_14+0x42>
 1f0:	95 b1       	in	r25, 0x05	; 5
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	89 27       	eor	r24, r25
 1f6:	85 b9       	out	0x05, r24	; 5
	if(time_cnt == 100)
 1f8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <time_cnt>
 1fc:	84 36       	cpi	r24, 0x64	; 100
 1fe:	39 f4       	brne	.+14     	; 0x20e <__vector_14+0x58>
	{
		time_sec++;
 200:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <time_sec>
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <time_sec>
		time_cnt = 0;
 20a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <time_cnt>
	}
	if(time_sec == 60)
 20e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <time_sec>
 212:	8c 33       	cpi	r24, 0x3C	; 60
 214:	39 f4       	brne	.+14     	; 0x224 <__vector_14+0x6e>
	{
		time_min++;
 216:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <time_min>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <time_min>
		time_sec = 0;
 220:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <time_sec>
	}
	
	if(main_btn_mode == 1)
 224:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	e9 f4       	brne	.+58     	; 0x266 <__vector_14+0xb0>
	{
		if(timer_btn_mode == 1)
 22c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <__vector_14+0x94>
		{
			if(time_min == TIME_SET_A)
 234:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <time_min>
 238:	8e 31       	cpi	r24, 0x1E	; 30
 23a:	a9 f4       	brne	.+42     	; 0x266 <__vector_14+0xb0>
			{
//				sprintf(temp, "--- main_mode  :  %dmin OFF  ---\n", time_min);
//				USART_Transmit_str(temp, _ASCII);
				main_btn_mode  = MODE_DEFAULT;
 23c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <main_btn_mode>
				led_btn_mode   = MODE_DEFAULT;
 240:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <led_btn_mode>
				timer_btn_mode = MODE_DEFAULT;
 244:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timer_btn_mode>
 248:	0e c0       	rjmp	.+28     	; 0x266 <__vector_14+0xb0>
			}
		}
		else if(timer_btn_mode == 2)
 24a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	51 f4       	brne	.+20     	; 0x266 <__vector_14+0xb0>
		{
			if(time_min == TIME_SET_B)
 252:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <time_min>
 256:	8c 33       	cpi	r24, 0x3C	; 60
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_14+0xb0>
			{
//				sprintf(temp, "--- main_mode  :  %dmin OFF  ---\n", time_min);
//				USART_Transmit_str(temp, _ASCII);
				main_btn_mode  = MODE_DEFAULT;
 25a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <main_btn_mode>
				led_btn_mode   = MODE_DEFAULT;
 25e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <led_btn_mode>
				timer_btn_mode = MODE_DEFAULT;
 262:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timer_btn_mode>
			}
		}
	}
	
	if(main_btn_mode == 0 && led_btn_mode == 0 && timer_btn_mode == 0)	PORTB &= ~(1 << PORTB5);
 266:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 26a:	81 11       	cpse	r24, r1
 26c:	09 c0       	rjmp	.+18     	; 0x280 <__vector_14+0xca>
 26e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 272:	81 11       	cpse	r24, r1
 274:	05 c0       	rjmp	.+10     	; 0x280 <__vector_14+0xca>
 276:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 27a:	81 11       	cpse	r24, r1
 27c:	01 c0       	rjmp	.+2      	; 0x280 <__vector_14+0xca>
 27e:	2d 98       	cbi	0x05, 5	; 5
}
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
	// ************************** MAIN_BTN PROCESS ************************** //
// 	sprintf(temp, "--- Now dimming = %d\n", dimming);
// 	USART_Transmit_str(temp, _ASCII);
	
	if(!MAIN_BTN)
 29c:	4a 99       	sbic	0x09, 2	; 9
 29e:	14 c0       	rjmp	.+40     	; 0x2c8 <__vector_11+0x38>
	{
		if(main_btn_flag == 0)
 2a0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <main_btn_flag>
 2a4:	81 11       	cpse	r24, r1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <__vector_11+0x24>
		{
			main_btn_flag = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <main_btn_flag>
			main_btn_cnt = 0;
 2ae:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <main_btn_cnt>
 2b2:	24 c0       	rjmp	.+72     	; 0x2fc <__vector_11+0x6c>
		}
		else
		{
			if(main_btn_cnt < 60)	main_btn_cnt++;
 2b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <main_btn_cnt>
 2b8:	8c 33       	cpi	r24, 0x3C	; 60
 2ba:	00 f5       	brcc	.+64     	; 0x2fc <__vector_11+0x6c>
 2bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <main_btn_cnt>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <main_btn_cnt>
 2c6:	1a c0       	rjmp	.+52     	; 0x2fc <__vector_11+0x6c>
		}
	}
	else
	{
		main_btn_flag = 0;
 2c8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <main_btn_flag>
		if(main_btn_cnt)
 2cc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <main_btn_cnt>
 2d0:	88 23       	and	r24, r24
 2d2:	91 f0       	breq	.+36     	; 0x2f8 <__vector_11+0x68>
		{
			if(main_btn_mode == 0)
 2d4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 2d8:	81 11       	cpse	r24, r1
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <__vector_11+0x5c>
			{
				main_btn_mode = 1;			// 전원 ON
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <main_btn_mode>
				led_btn_mode = 1;			// led mode = ON
 2e2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <led_btn_mode>
				dimming = 1;
 2e6:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <dimming>
 2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <__vector_11+0x68>
//				sprintf(temp, "--- main_mode  :  ON  ---\n");
			}
			else 
			{
				main_btn_mode  = MODE_DEFAULT;
 2ec:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <main_btn_mode>
				led_btn_mode   = MODE_DEFAULT;
 2f0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <led_btn_mode>
				timer_btn_mode = MODE_DEFAULT;
 2f4:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timer_btn_mode>
//				sprintf(temp, "--- main_mode  :  OFF ---\n");
			}
//			USART_Transmit_str(temp, _ASCII);
		}
		main_btn_cnt = 0;
 2f8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <main_btn_cnt>
	}
	
	// ************************** LED_BTN PROCESS ************************** //
	if(!LED_BTN)
 2fc:	4b 99       	sbic	0x09, 3	; 9
 2fe:	3e c0       	rjmp	.+124    	; 0x37c <__vector_11+0xec>
	{
		if(led_btn_flag == 0)
 300:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_btn_flag>
 304:	81 11       	cpse	r24, r1
 306:	08 c0       	rjmp	.+16     	; 0x318 <__vector_11+0x88>
		{
			led_btn_flag = 1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <led_btn_flag>
			led_btn_cnt = 0;
 30e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <led_btn_cnt>
			dimming_cnt = 0;
 312:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <dimming_cnt>
 316:	62 c0       	rjmp	.+196    	; 0x3dc <__vector_11+0x14c>
		}
		else
		{
			led_btn_cnt++;
 318:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <led_btn_cnt>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <led_btn_cnt>
			if(led_btn_cnt > 18)
 322:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <led_btn_cnt>
 326:	83 31       	cpi	r24, 0x13	; 19
 328:	08 f4       	brcc	.+2      	; 0x32c <__vector_11+0x9c>
 32a:	58 c0       	rjmp	.+176    	; 0x3dc <__vector_11+0x14c>
			{
				if(led_btn_mode == 1 || led_btn_mode == 2)
 32c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	29 f0       	breq	.+10     	; 0x33e <__vector_11+0xae>
 334:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	09 f0       	breq	.+2      	; 0x33e <__vector_11+0xae>
 33c:	4f c0       	rjmp	.+158    	; 0x3dc <__vector_11+0x14c>
				{
					if(dimming_mode == 0)
 33e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dimming_mode>
 342:	81 11       	cpse	r24, r1
 344:	0e c0       	rjmp	.+28     	; 0x362 <__vector_11+0xd2>
					{
//						if(dimming > 0)
//						{
							dimming = dimming + 1;
 346:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <dimming>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <dimming>
							if(dimming > 59)	dimming = 60;
 350:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <dimming>
 354:	8c 33       	cpi	r24, 0x3C	; 60
 356:	08 f4       	brcc	.+2      	; 0x35a <__vector_11+0xca>
 358:	41 c0       	rjmp	.+130    	; 0x3dc <__vector_11+0x14c>
 35a:	8c e3       	ldi	r24, 0x3C	; 60
 35c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <dimming>
 360:	3d c0       	rjmp	.+122    	; 0x3dc <__vector_11+0x14c>
					}
					else
					{
//						if(dimming < 200)
//						{
							dimming = dimming - 1;
 362:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <dimming>
 366:	81 50       	subi	r24, 0x01	; 1
 368:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <dimming>
							if(dimming < 2)		dimming = 1;
 36c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <dimming>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	a0 f5       	brcc	.+104    	; 0x3dc <__vector_11+0x14c>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <dimming>
 37a:	30 c0       	rjmp	.+96     	; 0x3dc <__vector_11+0x14c>
			}
		}
	}
	else
	{
		led_btn_flag = 0;
 37c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <led_btn_flag>
		if(led_btn_cnt)
 380:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <led_btn_cnt>
 384:	88 23       	and	r24, r24
 386:	31 f1       	breq	.+76     	; 0x3d4 <__vector_11+0x144>
		{
			if(led_btn_cnt > 18)
 388:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <led_btn_cnt>
 38c:	83 31       	cpi	r24, 0x13	; 19
 38e:	98 f0       	brcs	.+38     	; 0x3b6 <__vector_11+0x126>
			{
 				if(led_btn_mode == 1 || led_btn_mode == 2)
 390:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	21 f0       	breq	.+8      	; 0x3a0 <__vector_11+0x110>
 398:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	d1 f4       	brne	.+52     	; 0x3d4 <__vector_11+0x144>
 				{
 					if(dimming_mode == 0)	dimming_mode = 1;
 3a0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dimming_mode>
 3a4:	81 11       	cpse	r24, r1
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <__vector_11+0x120>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dimming_mode>
 3ae:	12 c0       	rjmp	.+36     	; 0x3d4 <__vector_11+0x144>
					else                    dimming_mode = 0;
 3b0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <dimming_mode>
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <__vector_11+0x144>
//				else if(led_btn_mode == 2)	sprintf(temp, "--- led_mode  :  ANI ---,  dimming = %d\n", dimming);
//				USART_Transmit_str(temp, _ASCII);
			}
			else
			{
				if(main_btn_mode == 1)
 3b6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <__vector_11+0x144>
				{
					// led_btn_mode = 0	------------- LED OFF
					// led_btn_mode = 1	------------- LED ON
					// led_btn_mode = 2	------------- Animation mode
					led_btn_mode++;
 3be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <led_btn_mode>
					if(led_btn_mode > 2)	led_btn_mode = 0;
 3c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <__vector_11+0x144>
 3d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <led_btn_mode>
// 					else						sprintf(temp, "--- led_mode  :  ANI ---,  dimming = %d\n", dimming);
// 					USART_Transmit_str(temp, _ASCII);
				}
			}
		}
		led_btn_cnt = 0;
 3d4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <led_btn_cnt>
		dimming_cnt = 0;
 3d8:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <dimming_cnt>
	}
	
	// ************************** TIMER_BTN PROCESS ************************** //
	if(!TIMER_BTN)
 3dc:	4c 99       	sbic	0x09, 4	; 9
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		if(timer_btn_flag == 0)
 3e0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <timer_btn_flag>
 3e4:	81 11       	cpse	r24, r1
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <__vector_11+0x164>
		{
			timer_btn_flag = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <timer_btn_flag>
			timer_btn_cnt = 0;
 3ee:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <timer_btn_cnt>
 3f2:	37 c0       	rjmp	.+110    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
		else
		{
			if(timer_btn_cnt < 60)	timer_btn_cnt++;
 3f4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <timer_btn_cnt>
 3f8:	8c 33       	cpi	r24, 0x3C	; 60
 3fa:	98 f5       	brcc	.+102    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 3fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <timer_btn_cnt>
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <timer_btn_cnt>
 406:	2d c0       	rjmp	.+90     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
	}
	else
	{
		timer_btn_flag = 0;
 408:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <timer_btn_flag>
		if(timer_btn_cnt)
 40c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <timer_btn_cnt>
 410:	88 23       	and	r24, r24
 412:	29 f1       	breq	.+74     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		{
			if(main_btn_mode == 1)
 414:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	09 f5       	brne	.+66     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				// timer_btn_mode = 1	------------- Turn off after timer 30min
				// timer_btn_mode = 2	------------- Turn off after timer 60min
				// timer_btn_mode = 0	------------- Turn on and timer off
				time_cnt = 0;	time_sec = 0;	time_min = 0;
 41c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <time_cnt>
 420:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <time_sec>
 424:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <time_min>
				timer_btn_mode++;
 428:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <timer_btn_mode>
				if(timer_btn_mode > 2)	timer_btn_mode = 0;
 432:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 436:	83 30       	cpi	r24, 0x03	; 3
 438:	10 f0       	brcs	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timer_btn_mode>
				if(timer_btn_mode == 0)
 43e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 442:	81 11       	cpse	r24, r1
 444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				{
					PORTC &= ~(1 << PORTC2);
 446:	42 98       	cbi	0x08, 2	; 8
					PORTC &= ~(1 << PORTC3);
 448:	43 98       	cbi	0x08, 3	; 8
 44a:	09 c0       	rjmp	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
//					sprintf(temp, "--- timer_mode  = Timer off     ---\n");
				}
				else if(timer_btn_mode == 1)
 44c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer_btn_mode>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	19 f4       	brne	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				{
					PORTC |= (1 << PORTC2);
 454:	42 9a       	sbi	0x08, 2	; 8
					PORTC &= ~(1 << PORTC3);
 456:	43 98       	cbi	0x08, 3	; 8
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
//					sprintf(temp, "--- timer_mode  = Timer 30min   ---\n");
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
 45a:	42 98       	cbi	0x08, 2	; 8
					PORTC |= (1 << PORTC3);
 45c:	43 9a       	sbi	0x08, 3	; 8
//					sprintf(temp, "--- timer_mode  = Timer 60min   ---\n");
				}
//				USART_Transmit_str(temp, _ASCII);
			}
		}
		timer_btn_cnt = 0;
 45e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <timer_btn_cnt>
	}
}
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <led_control>:


void led_control(char num)
{
 46e:	af 92       	push	r10
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
	int i, j;
	if(num == 2)
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	09 f0       	breq	.+2      	; 0x488 <led_control+0x1a>
 486:	39 c1       	rjmp	.+626    	; 0x6fa <led_control+0x28c>
// 			}
// 			ws2812_setleds(led, LED_NUM);
// 			_delay_ms(30);
// 			if(led_btn_mode != 2)	break;
// 		}
		if(ani_state == 0)
 488:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ani_state>
 48c:	81 11       	cpse	r24, r1
 48e:	9c c0       	rjmp	.+312    	; 0x5c8 <led_control+0x15a>
		{
			ani_state = 1;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <ani_state>
 496:	0f 2e       	mov	r0, r31
 498:	f4 ea       	ldi	r31, 0xA4	; 164
 49a:	cf 2e       	mov	r12, r31
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	df 2e       	mov	r13, r31
 4a0:	f0 2d       	mov	r31, r0
 4a2:	0f 2e       	mov	r0, r31
 4a4:	f4 ef       	ldi	r31, 0xF4	; 244
 4a6:	ef 2e       	mov	r14, r31
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	ff 2e       	mov	r15, r31
 4ac:	f0 2d       	mov	r31, r0
 4ae:	56 01       	movw	r10, r12
 4b0:	c1 eb       	ldi	r28, 0xB1	; 177
 4b2:	d2 e0       	ldi	r29, 0x02	; 2
 4b4:	06 e8       	ldi	r16, 0x86	; 134
 4b6:	13 e0       	ldi	r17, 0x03	; 3
 4b8:	80 c0       	rjmp	.+256    	; 0x5ba <led_control+0x14c>
			for(j=0; j<LED_NUM/2; j++)
			{
				for(i=0; i<9; i++)
				{
					led[i].r = led_tbl[j][0];
 4ba:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[j][1];
 4bc:	80 83       	st	Z, r24
					led[i].b = 0;
 4be:	12 82       	std	Z+2, r1	; 0x02
 4c0:	33 96       	adiw	r30, 0x03	; 3
		if(ani_state == 0)
		{
			ani_state = 1;
			for(j=0; j<LED_NUM/2; j++)
			{
				for(i=0; i<9; i++)
 4c2:	ce 17       	cp	r28, r30
 4c4:	df 07       	cpc	r29, r31
 4c6:	c9 f7       	brne	.-14     	; 0x4ba <led_control+0x4c>
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 4c8:	f7 01       	movw	r30, r14
 4ca:	20 81       	ld	r18, Z
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 4cc:	31 81       	ldd	r19, Z+1	; 0x01
 4ce:	e6 e9       	ldi	r30, 0x96	; 150
 4d0:	f2 e0       	ldi	r31, 0x02	; 2
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 4d2:	24 8f       	std	Z+28, r18	; 0x1c
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 4d4:	33 8f       	std	Z+27, r19	; 0x1b
					led[i].b = 0;
 4d6:	15 8e       	std	Z+29, r1	; 0x1d
 4d8:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
 4da:	ce 17       	cp	r28, r30
 4dc:	df 07       	cpc	r29, r31
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <led_control+0x64>
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=18; i<27; i++)
				{
					led[i].r = led_tbl[j][0];
 4e0:	d7 96       	adiw	r26, 0x37	; 55
 4e2:	9c 93       	st	X, r25
 4e4:	d7 97       	sbiw	r26, 0x37	; 55
					led[i].g = led_tbl[j][1];
 4e6:	d6 96       	adiw	r26, 0x36	; 54
 4e8:	8c 93       	st	X, r24
 4ea:	d6 97       	sbiw	r26, 0x36	; 54
					led[i].b = 0;
 4ec:	d8 96       	adiw	r26, 0x38	; 56
 4ee:	1c 92       	st	X, r1
 4f0:	d8 97       	sbiw	r26, 0x38	; 56
 4f2:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=18; i<27; i++)
 4f4:	ca 17       	cp	r28, r26
 4f6:	db 07       	cpc	r29, r27
 4f8:	99 f7       	brne	.-26     	; 0x4e0 <led_control+0x72>
 4fa:	a7 ee       	ldi	r26, 0xE7	; 231
 4fc:	b2 e0       	ldi	r27, 0x02	; 2
 4fe:	e2 e0       	ldi	r30, 0x02	; 2
 500:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=27; i<36; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	2c 93       	st	X, r18
 506:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 508:	3c 93       	st	X, r19
					led[i].b = 0;
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	1c 92       	st	X, r1
 50e:	12 97       	sbiw	r26, 0x02	; 2
 510:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=27; i<36; i++)
 512:	ea 17       	cp	r30, r26
 514:	fb 07       	cpc	r31, r27
 516:	a9 f7       	brne	.-22     	; 0x502 <led_control+0x94>
 518:	aa e1       	ldi	r26, 0x1A	; 26
 51a:	b3 e0       	ldi	r27, 0x03	; 3
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=36; i<44; i++)
				{
					led[i].r = led_tbl[j][0];
 51c:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[j][1];
 51e:	80 83       	st	Z, r24
					led[i].b = 0;
 520:	12 82       	std	Z+2, r1	; 0x02
 522:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=36; i<44; i++)
 524:	ea 17       	cp	r30, r26
 526:	fb 07       	cpc	r31, r27
 528:	c9 f7       	brne	.-14     	; 0x51c <led_control+0xae>
 52a:	e5 e3       	ldi	r30, 0x35	; 53
 52c:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=44; i<53; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 52e:	11 96       	adiw	r26, 0x01	; 1
 530:	2c 93       	st	X, r18
 532:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 534:	3c 93       	st	X, r19
					led[i].b = 0;
 536:	12 96       	adiw	r26, 0x02	; 2
 538:	1c 92       	st	X, r1
 53a:	12 97       	sbiw	r26, 0x02	; 2
 53c:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=44; i<53; i++)
 53e:	ea 17       	cp	r30, r26
 540:	fb 07       	cpc	r31, r27
 542:	a9 f7       	brne	.-22     	; 0x52e <led_control+0xc0>
 544:	a0 e5       	ldi	r26, 0x50	; 80
 546:	b3 e0       	ldi	r27, 0x03	; 3
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=53; i<62; i++)
				{
					led[i].r = led_tbl[j][0];
 548:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[j][1];
 54a:	80 83       	st	Z, r24
					led[i].b = 0;
 54c:	12 82       	std	Z+2, r1	; 0x02
 54e:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=53; i<62; i++)
 550:	ae 17       	cp	r26, r30
 552:	bf 07       	cpc	r27, r31
 554:	c9 f7       	brne	.-14     	; 0x548 <led_control+0xda>
 556:	eb e6       	ldi	r30, 0x6B	; 107
 558:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=62; i<71; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 55a:	11 96       	adiw	r26, 0x01	; 1
 55c:	2c 93       	st	X, r18
 55e:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 560:	3c 93       	st	X, r19
					led[i].b = 0;
 562:	12 96       	adiw	r26, 0x02	; 2
 564:	1c 92       	st	X, r1
 566:	12 97       	sbiw	r26, 0x02	; 2
 568:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=62; i<71; i++)
 56a:	ea 17       	cp	r30, r26
 56c:	fb 07       	cpc	r31, r27
 56e:	a9 f7       	brne	.-22     	; 0x55a <led_control+0xec>
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=71; i<80; i++)
				{
					led[i].r = led_tbl[j][0];
 570:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[j][1];
 572:	80 83       	st	Z, r24
					led[i].b = 0;
 574:	12 82       	std	Z+2, r1	; 0x02
 576:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=71; i<80; i++)
 578:	0e 17       	cp	r16, r30
 57a:	1f 07       	cpc	r17, r31
 57c:	c9 f7       	brne	.-14     	; 0x570 <led_control+0x102>
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				ws2812_setleds(led, LED_NUM);
 57e:	60 e5       	ldi	r22, 0x50	; 80
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	86 e9       	ldi	r24, 0x96	; 150
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	0e 94 ae 00 	call	0x15c	; 0x15c <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58a:	ff ef       	ldi	r31, 0xFF	; 255
 58c:	2a e6       	ldi	r18, 0x6A	; 106
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	f1 50       	subi	r31, 0x01	; 1
 592:	20 40       	sbci	r18, 0x00	; 0
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <led_control+0x122>
 598:	00 c0       	rjmp	.+0      	; 0x59a <led_control+0x12c>
 59a:	00 00       	nop
				_delay_ms(70);
				if(led_btn_mode != 2)	break;
 59c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <led_control+0x138>
 5a4:	aa c0       	rjmp	.+340    	; 0x6fa <led_control+0x28c>
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	a9 0e       	add	r10, r25
 5aa:	b1 1c       	adc	r11, r1
 5ac:	e2 e0       	ldi	r30, 0x02	; 2
 5ae:	ee 1a       	sub	r14, r30
 5b0:	f1 08       	sbc	r15, r1
// 			if(led_btn_mode != 2)	break;
// 		}
		if(ani_state == 0)
		{
			ani_state = 1;
			for(j=0; j<LED_NUM/2; j++)
 5b2:	ce 14       	cp	r12, r14
 5b4:	df 04       	cpc	r13, r15
 5b6:	09 f4       	brne	.+2      	; 0x5ba <led_control+0x14c>
 5b8:	a0 c0       	rjmp	.+320    	; 0x6fa <led_control+0x28c>
			{
				for(i=0; i<9; i++)
				{
					led[i].r = led_tbl[j][0];
 5ba:	f5 01       	movw	r30, r10
 5bc:	90 81       	ld	r25, Z
					led[i].g = led_tbl[j][1];
 5be:	81 81       	ldd	r24, Z+1	; 0x01
 5c0:	a6 e9       	ldi	r26, 0x96	; 150
 5c2:	b2 e0       	ldi	r27, 0x02	; 2
 5c4:	fd 01       	movw	r30, r26
 5c6:	79 cf       	rjmp	.-270    	; 0x4ba <led_control+0x4c>
				if(led_btn_mode != 2)	break;
			}
		}
		else
		{
			ani_state = 0;
 5c8:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <ani_state>
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f4 ef       	ldi	r31, 0xF4	; 244
 5d0:	cf 2e       	mov	r12, r31
 5d2:	f1 e0       	ldi	r31, 0x01	; 1
 5d4:	df 2e       	mov	r13, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	0f 2e       	mov	r0, r31
 5da:	f4 ea       	ldi	r31, 0xA4	; 164
 5dc:	ef 2e       	mov	r14, r31
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	ff 2e       	mov	r15, r31
 5e2:	f0 2d       	mov	r31, r0
 5e4:	56 01       	movw	r10, r12
 5e6:	c1 eb       	ldi	r28, 0xB1	; 177
 5e8:	d2 e0       	ldi	r29, 0x02	; 2
 5ea:	06 e8       	ldi	r16, 0x86	; 134
 5ec:	13 e0       	ldi	r17, 0x03	; 3
 5ee:	7e c0       	rjmp	.+252    	; 0x6ec <led_control+0x27e>
			for(j=0; j<LED_NUM/2; j++)
			{
				for(i=0; i<9; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 5f0:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 5f2:	80 83       	st	Z, r24
					led[i].b = 0;
 5f4:	12 82       	std	Z+2, r1	; 0x02
 5f6:	33 96       	adiw	r30, 0x03	; 3
		else
		{
			ani_state = 0;
			for(j=0; j<LED_NUM/2; j++)
			{
				for(i=0; i<9; i++)
 5f8:	ec 17       	cp	r30, r28
 5fa:	fd 07       	cpc	r31, r29
 5fc:	c9 f7       	brne	.-14     	; 0x5f0 <led_control+0x182>
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
				{
					led[i].r = led_tbl[j][0];
 5fe:	f7 01       	movw	r30, r14
 600:	20 81       	ld	r18, Z
					led[i].g = led_tbl[j][1];
 602:	31 81       	ldd	r19, Z+1	; 0x01
 604:	e6 e9       	ldi	r30, 0x96	; 150
 606:	f2 e0       	ldi	r31, 0x02	; 2
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
				{
					led[i].r = led_tbl[j][0];
 608:	24 8f       	std	Z+28, r18	; 0x1c
					led[i].g = led_tbl[j][1];
 60a:	33 8f       	std	Z+27, r19	; 0x1b
					led[i].b = 0;
 60c:	15 8e       	std	Z+29, r1	; 0x1d
 60e:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=9; i<18; i++)
 610:	ec 17       	cp	r30, r28
 612:	fd 07       	cpc	r31, r29
 614:	c9 f7       	brne	.-14     	; 0x608 <led_control+0x19a>
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=18; i<27; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 616:	d7 96       	adiw	r26, 0x37	; 55
 618:	9c 93       	st	X, r25
 61a:	d7 97       	sbiw	r26, 0x37	; 55
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 61c:	d6 96       	adiw	r26, 0x36	; 54
 61e:	8c 93       	st	X, r24
 620:	d6 97       	sbiw	r26, 0x36	; 54
					led[i].b = 0;
 622:	d8 96       	adiw	r26, 0x38	; 56
 624:	1c 92       	st	X, r1
 626:	d8 97       	sbiw	r26, 0x38	; 56
 628:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=18; i<27; i++)
 62a:	ac 17       	cp	r26, r28
 62c:	bd 07       	cpc	r27, r29
 62e:	99 f7       	brne	.-26     	; 0x616 <led_control+0x1a8>
 630:	a7 ee       	ldi	r26, 0xE7	; 231
 632:	b2 e0       	ldi	r27, 0x02	; 2
 634:	e2 e0       	ldi	r30, 0x02	; 2
 636:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=27; i<36; i++)
				{
					led[i].r = led_tbl[j][0];
 638:	11 96       	adiw	r26, 0x01	; 1
 63a:	2c 93       	st	X, r18
 63c:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[j][1];
 63e:	3c 93       	st	X, r19
					led[i].b = 0;
 640:	12 96       	adiw	r26, 0x02	; 2
 642:	1c 92       	st	X, r1
 644:	12 97       	sbiw	r26, 0x02	; 2
 646:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=27; i<36; i++)
 648:	ae 17       	cp	r26, r30
 64a:	bf 07       	cpc	r27, r31
 64c:	a9 f7       	brne	.-22     	; 0x638 <led_control+0x1ca>
 64e:	aa e1       	ldi	r26, 0x1A	; 26
 650:	b3 e0       	ldi	r27, 0x03	; 3
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=36; i<44; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 652:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 654:	80 83       	st	Z, r24
					led[i].b = 0;
 656:	12 82       	std	Z+2, r1	; 0x02
 658:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=36; i<44; i++)
 65a:	ea 17       	cp	r30, r26
 65c:	fb 07       	cpc	r31, r27
 65e:	c9 f7       	brne	.-14     	; 0x652 <led_control+0x1e4>
 660:	e5 e3       	ldi	r30, 0x35	; 53
 662:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=44; i<53; i++)
				{
					led[i].r = led_tbl[j][0];
 664:	11 96       	adiw	r26, 0x01	; 1
 666:	2c 93       	st	X, r18
 668:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[j][1];
 66a:	3c 93       	st	X, r19
					led[i].b = 0;
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	1c 92       	st	X, r1
 670:	12 97       	sbiw	r26, 0x02	; 2
 672:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=44; i<53; i++)
 674:	ae 17       	cp	r26, r30
 676:	bf 07       	cpc	r27, r31
 678:	a9 f7       	brne	.-22     	; 0x664 <led_control+0x1f6>
 67a:	a0 e5       	ldi	r26, 0x50	; 80
 67c:	b3 e0       	ldi	r27, 0x03	; 3
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=53; i<62; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 67e:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 680:	80 83       	st	Z, r24
					led[i].b = 0;
 682:	12 82       	std	Z+2, r1	; 0x02
 684:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=53; i<62; i++)
 686:	ea 17       	cp	r30, r26
 688:	fb 07       	cpc	r31, r27
 68a:	c9 f7       	brne	.-14     	; 0x67e <led_control+0x210>
 68c:	eb e6       	ldi	r30, 0x6B	; 107
 68e:	f3 e0       	ldi	r31, 0x03	; 3
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=62; i<71; i++)
				{
					led[i].r = led_tbl[j][0];
 690:	11 96       	adiw	r26, 0x01	; 1
 692:	2c 93       	st	X, r18
 694:	11 97       	sbiw	r26, 0x01	; 1
					led[i].g = led_tbl[j][1];
 696:	3c 93       	st	X, r19
					led[i].b = 0;
 698:	12 96       	adiw	r26, 0x02	; 2
 69a:	1c 92       	st	X, r1
 69c:	12 97       	sbiw	r26, 0x02	; 2
 69e:	13 96       	adiw	r26, 0x03	; 3
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				for(i=62; i<71; i++)
 6a0:	ea 17       	cp	r30, r26
 6a2:	fb 07       	cpc	r31, r27
 6a4:	a9 f7       	brne	.-22     	; 0x690 <led_control+0x222>
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=71; i<80; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 6a6:	91 83       	std	Z+1, r25	; 0x01
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 6a8:	80 83       	st	Z, r24
					led[i].b = 0;
 6aa:	12 82       	std	Z+2, r1	; 0x02
 6ac:	33 96       	adiw	r30, 0x03	; 3
				{
					led[i].r = led_tbl[j][0];
					led[i].g = led_tbl[j][1];
					led[i].b = 0;
				}
				for(i=71; i<80; i++)
 6ae:	0e 17       	cp	r16, r30
 6b0:	1f 07       	cpc	r17, r31
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <led_control+0x238>
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
					led[i].b = 0;
				}
				ws2812_setleds(led, LED_NUM);
 6b4:	60 e5       	ldi	r22, 0x50	; 80
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	86 e9       	ldi	r24, 0x96	; 150
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	0e 94 ae 00 	call	0x15c	; 0x15c <ws2812_setleds>
 6c0:	ff ef       	ldi	r31, 0xFF	; 255
 6c2:	2a e6       	ldi	r18, 0x6A	; 106
 6c4:	83 e0       	ldi	r24, 0x03	; 3
 6c6:	f1 50       	subi	r31, 0x01	; 1
 6c8:	20 40       	sbci	r18, 0x00	; 0
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <led_control+0x258>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <led_control+0x262>
 6d0:	00 00       	nop
				_delay_ms(70);
				if(led_btn_mode != 2)	break;
 6d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 6d6:	82 30       	cpi	r24, 0x02	; 2
 6d8:	81 f4       	brne	.+32     	; 0x6fa <led_control+0x28c>
 6da:	92 e0       	ldi	r25, 0x02	; 2
 6dc:	a9 1a       	sub	r10, r25
 6de:	b1 08       	sbc	r11, r1
 6e0:	e2 e0       	ldi	r30, 0x02	; 2
 6e2:	ee 0e       	add	r14, r30
 6e4:	f1 1c       	adc	r15, r1
			}
		}
		else
		{
			ani_state = 0;
			for(j=0; j<LED_NUM/2; j++)
 6e6:	ce 14       	cp	r12, r14
 6e8:	df 04       	cpc	r13, r15
 6ea:	39 f0       	breq	.+14     	; 0x6fa <led_control+0x28c>
			{
				for(i=0; i<9; i++)
				{
					led[i].r = led_tbl[(LED_NUM/2)-j][0];
 6ec:	f5 01       	movw	r30, r10
 6ee:	90 81       	ld	r25, Z
					led[i].g = led_tbl[(LED_NUM/2)-j][1];
 6f0:	81 81       	ldd	r24, Z+1	; 0x01
 6f2:	a6 e9       	ldi	r26, 0x96	; 150
 6f4:	b2 e0       	ldi	r27, 0x02	; 2
 6f6:	fd 01       	movw	r30, r26
 6f8:	7b cf       	rjmp	.-266    	; 0x5f0 <led_control+0x182>
				_delay_ms(70);
				if(led_btn_mode != 2)	break;
			}
		}
	}
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	bf 90       	pop	r11
 70c:	af 90       	pop	r10
 70e:	08 95       	ret

00000710 <led_display>:


void led_display(void)
{
 710:	a6 e9       	ldi	r26, 0x96	; 150
 712:	b2 e0       	ldi	r27, 0x02	; 2
 714:	26 e8       	ldi	r18, 0x86	; 134
 716:	33 e0       	ldi	r19, 0x03	; 3
	for(int i=0;i<LED_NUM;i++)
	{
		led[i].r = led_tbl_sec[dimming][0];
 718:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <dimming>
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	e0 50       	subi	r30, 0x00	; 0
 724:	ff 4f       	sbci	r31, 0xFF	; 255
 726:	80 81       	ld	r24, Z
 728:	11 96       	adiw	r26, 0x01	; 1
 72a:	8c 93       	st	X, r24
 72c:	11 97       	sbiw	r26, 0x01	; 1
		led[i].g = led_tbl_sec[dimming][1];
 72e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <dimming>
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	ee 0f       	add	r30, r30
 736:	ff 1f       	adc	r31, r31
 738:	e0 50       	subi	r30, 0x00	; 0
 73a:	ff 4f       	sbci	r31, 0xFF	; 255
 73c:	81 81       	ldd	r24, Z+1	; 0x01
 73e:	8c 93       	st	X, r24
//		led[i].r = (uint8_t)(240 / dimming);
//		led[i].g = (uint8_t)(150 / dimming);
		led[i].b = 0;		
 740:	12 96       	adiw	r26, 0x02	; 2
 742:	1c 92       	st	X, r1
 744:	12 97       	sbiw	r26, 0x02	; 2
 746:	13 96       	adiw	r26, 0x03	; 3
}


void led_display(void)
{
	for(int i=0;i<LED_NUM;i++)
 748:	a2 17       	cp	r26, r18
 74a:	b3 07       	cpc	r27, r19
 74c:	29 f7       	brne	.-54     	; 0x718 <led_display+0x8>
		led[i].g = led_tbl_sec[dimming][1];
//		led[i].r = (uint8_t)(240 / dimming);
//		led[i].g = (uint8_t)(150 / dimming);
		led[i].b = 0;		
	}
	ws2812_setleds(led, LED_NUM);
 74e:	60 e5       	ldi	r22, 0x50	; 80
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	86 e9       	ldi	r24, 0x96	; 150
 754:	92 e0       	ldi	r25, 0x02	; 2
 756:	0e 94 ae 00 	call	0x15c	; 0x15c <ws2812_setleds>
 75a:	08 95       	ret

0000075c <led_off>:
}

void led_off(void)
{
 75c:	e6 e9       	ldi	r30, 0x96	; 150
 75e:	f2 e0       	ldi	r31, 0x02	; 2
 760:	86 e8       	ldi	r24, 0x86	; 134
 762:	93 e0       	ldi	r25, 0x03	; 3
	for(int i=0;i<LED_NUM;i++)
	{
		led[i].r = 0;
 764:	11 82       	std	Z+1, r1	; 0x01
		led[i].g = 0;
 766:	10 82       	st	Z, r1
		led[i].b = 0;
 768:	12 82       	std	Z+2, r1	; 0x02
 76a:	33 96       	adiw	r30, 0x03	; 3
	ws2812_setleds(led, LED_NUM);
}

void led_off(void)
{
	for(int i=0;i<LED_NUM;i++)
 76c:	e8 17       	cp	r30, r24
 76e:	f9 07       	cpc	r31, r25
 770:	c9 f7       	brne	.-14     	; 0x764 <led_off+0x8>
	{
		led[i].r = 0;
		led[i].g = 0;
		led[i].b = 0;
	}
	ws2812_setleds(led, LED_NUM);
 772:	60 e5       	ldi	r22, 0x50	; 80
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	86 e9       	ldi	r24, 0x96	; 150
 778:	92 e0       	ldi	r25, 0x02	; 2
 77a:	0e 94 ae 00 	call	0x15c	; 0x15c <ws2812_setleds>
 77e:	08 95       	ret

00000780 <main>:
}


int main(void)
{
    DDRB = (1 << PORTB0) | (1 << PORTB5);		// PORTB0 = WS2812B, PORTB5 = status debug
 780:	81 e2       	ldi	r24, 0x21	; 33
 782:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4);
 784:	8c e1       	ldi	r24, 0x1C	; 28
 786:	87 b9       	out	0x07, r24	; 7
	TCCR0A = (1 << WGM01);			// CTC Mode
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00) | (1 << CS02);		// 1024 Prescale
 78c:	95 e0       	ldi	r25, 0x05	; 5
 78e:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);			// Compare A Match Interrupt Enable
 790:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 0x9C;					// 10ms TIMER SET
 794:	9c e9       	ldi	r25, 0x9C	; 156
 796:	97 bd       	out	0x27, r25	; 39
	
	TCCR1A = 0x00;                  // CTC Mode
 798:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0B;                  // 64 prescale        16000000 / 64 65535
 79c:	9b e0       	ldi	r25, 0x0B	; 11
 79e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x02;                  // Compare A Match Interrupt Enable
 7a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	OCR1A = 0x30D4;                 // 50ms TIMER SET
 7a6:	84 ed       	ldi	r24, 0xD4	; 212
 7a8:	90 e3       	ldi	r25, 0x30	; 48
 7aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	USART_Init(BAUD_9600);
 7b2:	87 e6       	ldi	r24, 0x67	; 103
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	led_off();
 7ba:	0e 94 ae 03 	call	0x75c	; 0x75c <led_off>
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	89 e6       	ldi	r24, 0x69	; 105
 7c2:	98 e1       	ldi	r25, 0x18	; 24
 7c4:	21 50       	subi	r18, 0x01	; 1
 7c6:	80 40       	sbci	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0x44>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0x4e>
 7ce:	00 00       	nop
	
	_delay_ms(500);
//	sprintf(temp, "--- Now Start ---\n");
//	USART_Transmit_str(temp, _ASCII);
	sei();
 7d0:	78 94       	sei
    while (1)
    {
  		if(main_btn_mode == 1 && led_btn_mode == 1)
 7d2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <main+0x68>
 7da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	19 f4       	brne	.+6      	; 0x7e8 <main+0x68>
  		{
 			led_display();
 7e2:	0e 94 88 03 	call	0x710	; 0x710 <led_display>
 7e6:	f5 cf       	rjmp	.-22     	; 0x7d2 <main+0x52>
		}
		else if(main_btn_mode == 1 && led_btn_mode == 2)
 7e8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	39 f4       	brne	.+14     	; 0x7fe <main+0x7e>
 7f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 7f4:	82 30       	cpi	r24, 0x02	; 2
 7f6:	19 f4       	brne	.+6      	; 0x7fe <main+0x7e>
		{
	 		led_control(2);
 7f8:	0e 94 37 02 	call	0x46e	; 0x46e <led_control>
 7fc:	ea cf       	rjmp	.-44     	; 0x7d2 <main+0x52>
		}
		else if(main_btn_mode == 0 || led_btn_mode == 0)
 7fe:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <main_btn_mode>
 802:	88 23       	and	r24, r24
 804:	21 f0       	breq	.+8      	; 0x80e <main+0x8e>
 806:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <led_btn_mode>
 80a:	81 11       	cpse	r24, r1
 80c:	e2 cf       	rjmp	.-60     	; 0x7d2 <main+0x52>
		{
			led_off();
 80e:	0e 94 ae 03 	call	0x75c	; 0x75c <led_off>
			PORTB &= ~(1 << PORTB5);
 812:	2d 98       	cbi	0x05, 5	; 5
			PORTC &= ~(1 << PORTC2);
 814:	42 98       	cbi	0x08, 2	; 8
			PORTC &= ~(1 << PORTC3);
 816:	43 98       	cbi	0x08, 3	; 8
 818:	dc cf       	rjmp	.-72     	; 0x7d2 <main+0x52>

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>

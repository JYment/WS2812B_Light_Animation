
stm_ws2812b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  0002099c  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  0002099c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  0002099c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000099c  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000099c  080034a0  0002099c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080034a0  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002099c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eecf  00000000  00000000  000209c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002097  00000000  00000000  0002f894  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  00032290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016eb0  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009833  00000000  00000000  000499b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a88d  00000000  00000000  000531eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cda78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002544  00000000  00000000  000cdaf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000099c 	.word	0x2000099c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ac0 	.word	0x08002ac0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009a0 	.word	0x200009a0
 8000220:	08002ac0 	.word	0x08002ac0

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f941 	bl	80004bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f002 fa5c 	bl	80026fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f959 	bl	8000526 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f921 	bl	80004d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000998 	.word	0x20000998
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	200009b8 	.word	0x200009b8

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	200009b8 	.word	0x200009b8

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f003 021f 	and.w	r2, r3, #31
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <NVIC_EnableIRQ+0x2c>)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	095b      	lsrs	r3, r3, #5
 80003a8:	2001      	movs	r0, #1
 80003aa:	fa00 f202 	lsl.w	r2, r0, r2
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	490c      	ldr	r1, [pc, #48]	; (800040c <NVIC_SetPriority+0x4c>)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	3b04      	subs	r3, #4
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ea:	e009      	b.n	8000400 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <NVIC_SetPriority+0x50>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e100 	.word	0xe000e100

08000414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	f1c3 0307 	rsb	r3, r3, #7
 800042e:	2b04      	cmp	r3, #4
 8000430:	bf28      	it	cs
 8000432:	2304      	movcs	r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3304      	adds	r3, #4
 800043a:	2b06      	cmp	r3, #6
 800043c:	d902      	bls.n	8000444 <NVIC_EncodePriority+0x30>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3b03      	subs	r3, #3
 8000442:	e000      	b.n	8000446 <NVIC_EncodePriority+0x32>
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	f04f 32ff 	mov.w	r2, #4294967295
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	43da      	mvns	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	401a      	ands	r2, r3
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800045c:	f04f 31ff 	mov.w	r1, #4294967295
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	43d9      	mvns	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	4313      	orrs	r3, r2
         );
}
 800046e:	4618      	mov	r0, r3
 8000470:	3724      	adds	r7, #36	; 0x24
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000488:	d301      	bcc.n	800048e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800048a:	2301      	movs	r3, #1
 800048c:	e00f      	b.n	80004ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <SysTick_Config+0x40>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000496:	210f      	movs	r1, #15
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	f7ff ff90 	bl	80003c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SysTick_Config+0x40>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SysTick_Config+0x40>)
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	e000e010 	.word	0xe000e010

080004bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff31 	bl	800032c <NVIC_SetPriorityGrouping>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e4:	f7ff ff46 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	68b9      	ldr	r1, [r7, #8]
 80004ee:	6978      	ldr	r0, [r7, #20]
 80004f0:	f7ff ff90 	bl	8000414 <NVIC_EncodePriority>
 80004f4:	4602      	mov	r2, r0
 80004f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff5f 	bl	80003c0 <NVIC_SetPriority>
}
 8000502:	bf00      	nop
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff39 	bl	8000390 <NVIC_EnableIRQ>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ffa2 	bl	8000478 <SysTick_Config>
 8000534:	4603      	mov	r3, r0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e059      	b.n	800060a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <HAL_DMA_Init+0xd4>)
 800055e:	429a      	cmp	r2, r3
 8000560:	d80f      	bhi.n	8000582 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <HAL_DMA_Init+0xd8>)
 800056a:	4413      	add	r3, r2
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <HAL_DMA_Init+0xdc>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	009a      	lsls	r2, r3, #2
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a28      	ldr	r2, [pc, #160]	; (8000620 <HAL_DMA_Init+0xe0>)
 800057e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000580:	e00e      	b.n	80005a0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <HAL_DMA_Init+0xe4>)
 800058a:	4413      	add	r3, r2
 800058c:	4a23      	ldr	r2, [pc, #140]	; (800061c <HAL_DMA_Init+0xdc>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	009a      	lsls	r2, r3, #2
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <HAL_DMA_Init+0xe8>)
 800059e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2202      	movs	r2, #2
 80005a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80005b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80005c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40020407 	.word	0x40020407
 8000618:	bffdfff8 	.word	0xbffdfff8
 800061c:	cccccccd 	.word	0xcccccccd
 8000620:	40020000 	.word	0x40020000
 8000624:	bffdfbf8 	.word	0xbffdfbf8
 8000628:	40020400 	.word	0x40020400

0800062c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d101      	bne.n	800064c <HAL_DMA_Start_IT+0x20>
 8000648:	2302      	movs	r3, #2
 800064a:	e04a      	b.n	80006e2 <HAL_DMA_Start_IT+0xb6>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2201      	movs	r2, #1
 8000650:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800065a:	2b01      	cmp	r3, #1
 800065c:	d13a      	bne.n	80006d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2202      	movs	r2, #2
 8000662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2200      	movs	r2, #0
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f022 0201 	bic.w	r2, r2, #1
 800067a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f000 fa6e 	bl	8000b64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f042 020e 	orr.w	r2, r2, #14
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e00f      	b.n	80006c2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f022 0204 	bic.w	r2, r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f042 020a 	orr.w	r2, r2, #10
 80006c0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f042 0201 	orr.w	r2, r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e005      	b.n	80006e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80006dc:	2302      	movs	r3, #2
 80006de:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	2204      	movs	r2, #4
 800070a:	409a      	lsls	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4013      	ands	r3, r2
 8000710:	2b00      	cmp	r3, #0
 8000712:	f000 80d6 	beq.w	80008c2 <HAL_DMA_IRQHandler+0x1d6>
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 80d0 	beq.w	80008c2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	2b00      	cmp	r3, #0
 800072e:	d107      	bne.n	8000740 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 0204 	bic.w	r2, r2, #4
 800073e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b9b      	ldr	r3, [pc, #620]	; (80009b4 <HAL_DMA_IRQHandler+0x2c8>)
 8000748:	429a      	cmp	r2, r3
 800074a:	d958      	bls.n	80007fe <HAL_DMA_IRQHandler+0x112>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a99      	ldr	r2, [pc, #612]	; (80009b8 <HAL_DMA_IRQHandler+0x2cc>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d04f      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x10a>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a98      	ldr	r2, [pc, #608]	; (80009bc <HAL_DMA_IRQHandler+0x2d0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d048      	beq.n	80007f2 <HAL_DMA_IRQHandler+0x106>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a96      	ldr	r2, [pc, #600]	; (80009c0 <HAL_DMA_IRQHandler+0x2d4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d040      	beq.n	80007ec <HAL_DMA_IRQHandler+0x100>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a95      	ldr	r2, [pc, #596]	; (80009c4 <HAL_DMA_IRQHandler+0x2d8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d038      	beq.n	80007e6 <HAL_DMA_IRQHandler+0xfa>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <HAL_DMA_IRQHandler+0x2dc>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d030      	beq.n	80007e0 <HAL_DMA_IRQHandler+0xf4>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a92      	ldr	r2, [pc, #584]	; (80009cc <HAL_DMA_IRQHandler+0x2e0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d028      	beq.n	80007da <HAL_DMA_IRQHandler+0xee>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a89      	ldr	r2, [pc, #548]	; (80009b4 <HAL_DMA_IRQHandler+0x2c8>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d020      	beq.n	80007d4 <HAL_DMA_IRQHandler+0xe8>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a8e      	ldr	r2, [pc, #568]	; (80009d0 <HAL_DMA_IRQHandler+0x2e4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d019      	beq.n	80007d0 <HAL_DMA_IRQHandler+0xe4>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a8c      	ldr	r2, [pc, #560]	; (80009d4 <HAL_DMA_IRQHandler+0x2e8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d012      	beq.n	80007cc <HAL_DMA_IRQHandler+0xe0>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a8b      	ldr	r2, [pc, #556]	; (80009d8 <HAL_DMA_IRQHandler+0x2ec>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d00a      	beq.n	80007c6 <HAL_DMA_IRQHandler+0xda>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a89      	ldr	r2, [pc, #548]	; (80009dc <HAL_DMA_IRQHandler+0x2f0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d102      	bne.n	80007c0 <HAL_DMA_IRQHandler+0xd4>
 80007ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007be:	e01b      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007c4:	e018      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	e015      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	e013      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007d0:	2304      	movs	r3, #4
 80007d2:	e011      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007d8:	e00e      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	e00b      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007e4:	e008      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ea:	e005      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	e002      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	e000      	b.n	80007f8 <HAL_DMA_IRQHandler+0x10c>
 80007f6:	2304      	movs	r3, #4
 80007f8:	4a79      	ldr	r2, [pc, #484]	; (80009e0 <HAL_DMA_IRQHandler+0x2f4>)
 80007fa:	6053      	str	r3, [r2, #4]
 80007fc:	e057      	b.n	80008ae <HAL_DMA_IRQHandler+0x1c2>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a6d      	ldr	r2, [pc, #436]	; (80009b8 <HAL_DMA_IRQHandler+0x2cc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d04f      	beq.n	80008a8 <HAL_DMA_IRQHandler+0x1bc>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a6b      	ldr	r2, [pc, #428]	; (80009bc <HAL_DMA_IRQHandler+0x2d0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d048      	beq.n	80008a4 <HAL_DMA_IRQHandler+0x1b8>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a6a      	ldr	r2, [pc, #424]	; (80009c0 <HAL_DMA_IRQHandler+0x2d4>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d040      	beq.n	800089e <HAL_DMA_IRQHandler+0x1b2>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a68      	ldr	r2, [pc, #416]	; (80009c4 <HAL_DMA_IRQHandler+0x2d8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d038      	beq.n	8000898 <HAL_DMA_IRQHandler+0x1ac>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a67      	ldr	r2, [pc, #412]	; (80009c8 <HAL_DMA_IRQHandler+0x2dc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d030      	beq.n	8000892 <HAL_DMA_IRQHandler+0x1a6>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a65      	ldr	r2, [pc, #404]	; (80009cc <HAL_DMA_IRQHandler+0x2e0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d028      	beq.n	800088c <HAL_DMA_IRQHandler+0x1a0>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a5d      	ldr	r2, [pc, #372]	; (80009b4 <HAL_DMA_IRQHandler+0x2c8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d020      	beq.n	8000886 <HAL_DMA_IRQHandler+0x19a>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a61      	ldr	r2, [pc, #388]	; (80009d0 <HAL_DMA_IRQHandler+0x2e4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d019      	beq.n	8000882 <HAL_DMA_IRQHandler+0x196>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a60      	ldr	r2, [pc, #384]	; (80009d4 <HAL_DMA_IRQHandler+0x2e8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d012      	beq.n	800087e <HAL_DMA_IRQHandler+0x192>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a5e      	ldr	r2, [pc, #376]	; (80009d8 <HAL_DMA_IRQHandler+0x2ec>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d00a      	beq.n	8000878 <HAL_DMA_IRQHandler+0x18c>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a5d      	ldr	r2, [pc, #372]	; (80009dc <HAL_DMA_IRQHandler+0x2f0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d102      	bne.n	8000872 <HAL_DMA_IRQHandler+0x186>
 800086c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000870:	e01b      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000872:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000876:	e018      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087c:	e015      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	e013      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000882:	2304      	movs	r3, #4
 8000884:	e011      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000886:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800088a:	e00e      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 800088c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000890:	e00b      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000892:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000896:	e008      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 8000898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089c:	e005      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	e002      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	e000      	b.n	80008aa <HAL_DMA_IRQHandler+0x1be>
 80008a8:	2304      	movs	r3, #4
 80008aa:	4a4e      	ldr	r2, [pc, #312]	; (80009e4 <HAL_DMA_IRQHandler+0x2f8>)
 80008ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8136 	beq.w	8000b24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80008c0:	e130      	b.n	8000b24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	2202      	movs	r2, #2
 80008c8:	409a      	lsls	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 80f8 	beq.w	8000ac4 <HAL_DMA_IRQHandler+0x3d8>
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 80f2 	beq.w	8000ac4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10b      	bne.n	8000906 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 020a 	bic.w	r2, r2, #10
 80008fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <HAL_DMA_IRQHandler+0x2c8>)
 800090e:	429a      	cmp	r2, r3
 8000910:	d973      	bls.n	80009fa <HAL_DMA_IRQHandler+0x30e>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_DMA_IRQHandler+0x2cc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d06a      	beq.n	80009f2 <HAL_DMA_IRQHandler+0x306>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_DMA_IRQHandler+0x2d0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d063      	beq.n	80009ee <HAL_DMA_IRQHandler+0x302>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a25      	ldr	r2, [pc, #148]	; (80009c0 <HAL_DMA_IRQHandler+0x2d4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d05b      	beq.n	80009e8 <HAL_DMA_IRQHandler+0x2fc>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <HAL_DMA_IRQHandler+0x2d8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d038      	beq.n	80009ac <HAL_DMA_IRQHandler+0x2c0>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_DMA_IRQHandler+0x2dc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d030      	beq.n	80009a6 <HAL_DMA_IRQHandler+0x2ba>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_DMA_IRQHandler+0x2e0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d028      	beq.n	80009a0 <HAL_DMA_IRQHandler+0x2b4>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_DMA_IRQHandler+0x2c8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d020      	beq.n	800099a <HAL_DMA_IRQHandler+0x2ae>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <HAL_DMA_IRQHandler+0x2e4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_DMA_IRQHandler+0x2aa>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <HAL_DMA_IRQHandler+0x2e8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d012      	beq.n	8000992 <HAL_DMA_IRQHandler+0x2a6>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_DMA_IRQHandler+0x2ec>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00a      	beq.n	800098c <HAL_DMA_IRQHandler+0x2a0>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <HAL_DMA_IRQHandler+0x2f0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d102      	bne.n	8000986 <HAL_DMA_IRQHandler+0x29a>
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	e036      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 8000986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098a:	e033      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 800098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000990:	e030      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 8000992:	2320      	movs	r3, #32
 8000994:	e02e      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 8000996:	2302      	movs	r3, #2
 8000998:	e02c      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 800099a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099e:	e029      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80009a4:	e026      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009aa:	e023      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	e020      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009b2:	bf00      	nop
 80009b4:	40020080 	.word	0x40020080
 80009b8:	40020008 	.word	0x40020008
 80009bc:	4002001c 	.word	0x4002001c
 80009c0:	40020030 	.word	0x40020030
 80009c4:	40020044 	.word	0x40020044
 80009c8:	40020058 	.word	0x40020058
 80009cc:	4002006c 	.word	0x4002006c
 80009d0:	40020408 	.word	0x40020408
 80009d4:	4002041c 	.word	0x4002041c
 80009d8:	40020430 	.word	0x40020430
 80009dc:	40020444 	.word	0x40020444
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40020000 	.word	0x40020000
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	e002      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009ee:	2320      	movs	r3, #32
 80009f0:	e000      	b.n	80009f4 <HAL_DMA_IRQHandler+0x308>
 80009f2:	2302      	movs	r3, #2
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_DMA_IRQHandler+0x444>)
 80009f6:	6053      	str	r3, [r2, #4]
 80009f8:	e057      	b.n	8000aaa <HAL_DMA_IRQHandler+0x3be>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_DMA_IRQHandler+0x448>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d04f      	beq.n	8000aa4 <HAL_DMA_IRQHandler+0x3b8>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a4b      	ldr	r2, [pc, #300]	; (8000b38 <HAL_DMA_IRQHandler+0x44c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d048      	beq.n	8000aa0 <HAL_DMA_IRQHandler+0x3b4>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <HAL_DMA_IRQHandler+0x450>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d040      	beq.n	8000a9a <HAL_DMA_IRQHandler+0x3ae>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_DMA_IRQHandler+0x454>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d038      	beq.n	8000a94 <HAL_DMA_IRQHandler+0x3a8>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a47      	ldr	r2, [pc, #284]	; (8000b44 <HAL_DMA_IRQHandler+0x458>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d030      	beq.n	8000a8e <HAL_DMA_IRQHandler+0x3a2>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <HAL_DMA_IRQHandler+0x45c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d028      	beq.n	8000a88 <HAL_DMA_IRQHandler+0x39c>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <HAL_DMA_IRQHandler+0x460>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d020      	beq.n	8000a82 <HAL_DMA_IRQHandler+0x396>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <HAL_DMA_IRQHandler+0x464>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d019      	beq.n	8000a7e <HAL_DMA_IRQHandler+0x392>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a41      	ldr	r2, [pc, #260]	; (8000b54 <HAL_DMA_IRQHandler+0x468>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d012      	beq.n	8000a7a <HAL_DMA_IRQHandler+0x38e>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a3f      	ldr	r2, [pc, #252]	; (8000b58 <HAL_DMA_IRQHandler+0x46c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00a      	beq.n	8000a74 <HAL_DMA_IRQHandler+0x388>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <HAL_DMA_IRQHandler+0x470>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d102      	bne.n	8000a6e <HAL_DMA_IRQHandler+0x382>
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	e01b      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	e018      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a78:	e015      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	e013      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e011      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a86:	e00e      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a8c:	e00b      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a92:	e008      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	e005      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9e:	e002      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	e000      	b.n	8000aa6 <HAL_DMA_IRQHandler+0x3ba>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	4a2e      	ldr	r2, [pc, #184]	; (8000b60 <HAL_DMA_IRQHandler+0x474>)
 8000aa8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d034      	beq.n	8000b24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ac2:	e02f      	b.n	8000b24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	2208      	movs	r2, #8
 8000aca:	409a      	lsls	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d028      	beq.n	8000b26 <HAL_DMA_IRQHandler+0x43a>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d023      	beq.n	8000b26 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 020e 	bic.w	r2, r2, #14
 8000aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f202 	lsl.w	r2, r1, r2
 8000afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d004      	beq.n	8000b26 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	4798      	blx	r3
    }
  }
  return;
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
}
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020008 	.word	0x40020008
 8000b38:	4002001c 	.word	0x4002001c
 8000b3c:	40020030 	.word	0x40020030
 8000b40:	40020044 	.word	0x40020044
 8000b44:	40020058 	.word	0x40020058
 8000b48:	4002006c 	.word	0x4002006c
 8000b4c:	40020080 	.word	0x40020080
 8000b50:	40020408 	.word	0x40020408
 8000b54:	4002041c 	.word	0x4002041c
 8000b58:	40020430 	.word	0x40020430
 8000b5c:	40020444 	.word	0x40020444
 8000b60:	40020000 	.word	0x40020000

08000b64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b10      	cmp	r3, #16
 8000b90:	d108      	bne.n	8000ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ba2:	e007      	b.n	8000bb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
 8000be2:	e133      	b.n	8000e4c <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000be4:	2201      	movs	r2, #1
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8122 	bne.w	8000e46 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d034      	beq.n	8000c74 <HAL_GPIO_Init+0xb4>
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d80d      	bhi.n	8000c2a <HAL_GPIO_Init+0x6a>
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d02b      	beq.n	8000c6a <HAL_GPIO_Init+0xaa>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d804      	bhi.n	8000c20 <HAL_GPIO_Init+0x60>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d031      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d01c      	beq.n	8000c58 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1e:	e048      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d043      	beq.n	8000cac <HAL_GPIO_Init+0xec>
 8000c24:	2b11      	cmp	r3, #17
 8000c26:	d01b      	beq.n	8000c60 <HAL_GPIO_Init+0xa0>
          break;
 8000c28:	e043      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c2a:	4a8d      	ldr	r2, [pc, #564]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d026      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
 8000c30:	4a8b      	ldr	r2, [pc, #556]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d806      	bhi.n	8000c44 <HAL_GPIO_Init+0x84>
 8000c36:	4a8b      	ldr	r2, [pc, #556]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d020      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
 8000c3c:	4a8a      	ldr	r2, [pc, #552]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d01d      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
          break;
 8000c42:	e036      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c44:	4a89      	ldr	r2, [pc, #548]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d019      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
 8000c4a:	4a89      	ldr	r2, [pc, #548]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d016      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
 8000c50:	4a88      	ldr	r2, [pc, #544]	; (8000e74 <HAL_GPIO_Init+0x2b4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0xbe>
          break;
 8000c56:	e02c      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e028      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	3304      	adds	r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e023      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e01e      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e019      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c86:	2304      	movs	r3, #4
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e012      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d105      	bne.n	8000ca0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c94:	2308      	movs	r3, #8
 8000c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	611a      	str	r2, [r3, #16]
          break;
 8000c9e:	e008      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	615a      	str	r2, [r3, #20]
          break;
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2bff      	cmp	r3, #255	; 0xff
 8000cb6:	d801      	bhi.n	8000cbc <HAL_GPIO_Init+0xfc>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	e001      	b.n	8000cc0 <HAL_GPIO_Init+0x100>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2bff      	cmp	r3, #255	; 0xff
 8000cc6:	d802      	bhi.n	8000cce <HAL_GPIO_Init+0x10e>
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x114>
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	210f      	movs	r1, #15
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	6a39      	ldr	r1, [r7, #32]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 80a2 	beq.w	8000e46 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a5c      	ldr	r2, [pc, #368]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d1a:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <HAL_GPIO_Init+0x2c0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x1c6>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4e      	ldr	r2, [pc, #312]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x1c2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <HAL_GPIO_Init+0x2c8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x1be>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <HAL_GPIO_Init+0x2cc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x1ba>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4b      	ldr	r2, [pc, #300]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x1b6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4a      	ldr	r2, [pc, #296]	; (8000e94 <HAL_GPIO_Init+0x2d4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x1b2>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e00a      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d72:	2306      	movs	r3, #6
 8000d74:	e008      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e004      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x1c8>
 8000d86:	2300      	movs	r3, #0
 8000d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8a:	f002 0203 	and.w	r2, r2, #3
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	4093      	lsls	r3, r2
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000d98:	4938      	ldr	r1, [pc, #224]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4938      	ldr	r1, [pc, #224]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc0:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	4933      	ldr	r1, [pc, #204]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	492e      	ldr	r1, [pc, #184]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4929      	ldr	r1, [pc, #164]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	4924      	ldr	r1, [pc, #144]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	608b      	str	r3, [r1, #8]
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	491f      	ldr	r1, [pc, #124]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	491a      	ldr	r1, [pc, #104]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60cb      	str	r3, [r1, #12]
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4915      	ldr	r1, [pc, #84]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3301      	adds	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	f67f aec8 	bls.w	8000be4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000e54:	bf00      	nop
 8000e56:	372c      	adds	r7, #44	; 0x2c
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	10210000 	.word	0x10210000
 8000e64:	10110000 	.word	0x10110000
 8000e68:	10120000 	.word	0x10120000
 8000e6c:	10310000 	.word	0x10310000
 8000e70:	10320000 	.word	0x10320000
 8000e74:	10220000 	.word	0x10220000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	40011800 	.word	0x40011800
 8000e94:	40011c00 	.word	0x40011c00
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 8087 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eb6:	4b92      	ldr	r3, [pc, #584]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d00c      	beq.n	8000edc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec2:	4b8f      	ldr	r3, [pc, #572]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d112      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x58>
 8000ece:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d10b      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000edc:	4b88      	ldr	r3, [pc, #544]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d06c      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x126>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d168      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e22d      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efc:	d106      	bne.n	8000f0c <HAL_RCC_OscConfig+0x70>
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7f      	ldr	r2, [pc, #508]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e02e      	b.n	8000f6a <HAL_RCC_OscConfig+0xce>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x92>
 8000f14:	4b7a      	ldr	r3, [pc, #488]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a79      	ldr	r2, [pc, #484]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b77      	ldr	r3, [pc, #476]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a76      	ldr	r2, [pc, #472]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e01d      	b.n	8000f6a <HAL_RCC_OscConfig+0xce>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f36:	d10c      	bne.n	8000f52 <HAL_RCC_OscConfig+0xb6>
 8000f38:	4b71      	ldr	r3, [pc, #452]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a70      	ldr	r2, [pc, #448]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b6e      	ldr	r3, [pc, #440]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6d      	ldr	r2, [pc, #436]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e00b      	b.n	8000f6a <HAL_RCC_OscConfig+0xce>
 8000f52:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a6a      	ldr	r2, [pc, #424]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b68      	ldr	r3, [pc, #416]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a67      	ldr	r2, [pc, #412]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d013      	beq.n	8000f9a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff f9af 	bl	80002d4 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff f9ab 	bl	80002d4 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e1e1      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0xde>
 8000f98:	e014      	b.n	8000fc4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff f99b 	bl	80002d4 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff f997 	bl	80002d4 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1cd      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x106>
 8000fc0:	e000      	b.n	8000fc4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d063      	beq.n	8001098 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d11c      	bne.n	8001022 <HAL_RCC_OscConfig+0x186>
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d116      	bne.n	8001022 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_OscConfig+0x170>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d001      	beq.n	800100c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e1a1      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4939      	ldr	r1, [pc, #228]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001020:	e03a      	b.n	8001098 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d020      	beq.n	800106c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_RCC_OscConfig+0x268>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff f950 	bl	80002d4 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff f94c 	bl	80002d4 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e182      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4926      	ldr	r1, [pc, #152]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
 800106a:	e015      	b.n	8001098 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_RCC_OscConfig+0x268>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff f92f 	bl	80002d4 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff f92b 	bl	80002d4 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e161      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d039      	beq.n	8001118 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d019      	beq.n	80010e0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff f90f 	bl	80002d4 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ba:	f7ff f90b 	bl	80002d4 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e141      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_RCC_OscConfig+0x264>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 fab1 	bl	8001640 <RCC_Delay>
 80010de:	e01b      	b.n	8001118 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff f8f5 	bl	80002d4 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	e00e      	b.n	800110c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff f8f1 	bl	80002d4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d907      	bls.n	800110c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e127      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
 8001100:	40021000 	.word	0x40021000
 8001104:	42420000 	.word	0x42420000
 8001108:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	4b92      	ldr	r3, [pc, #584]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ea      	bne.n	80010ee <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a6 	beq.w	8001272 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112a:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10d      	bne.n	8001152 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a87      	ldr	r2, [pc, #540]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b82      	ldr	r3, [pc, #520]	; (800135c <HAL_RCC_OscConfig+0x4c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115e:	4b7f      	ldr	r3, [pc, #508]	; (800135c <HAL_RCC_OscConfig+0x4c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7e      	ldr	r2, [pc, #504]	; (800135c <HAL_RCC_OscConfig+0x4c0>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116a:	f7ff f8b3 	bl	80002d4 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001172:	f7ff f8af 	bl	80002d4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0e5      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <HAL_RCC_OscConfig+0x4c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x30a>
 8001198:	4b6f      	ldr	r3, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	e02d      	b.n	8001202 <HAL_RCC_OscConfig+0x366>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x32c>
 80011ae:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a69      	ldr	r2, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a66      	ldr	r2, [pc, #408]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	e01c      	b.n	8001202 <HAL_RCC_OscConfig+0x366>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d10c      	bne.n	80011ea <HAL_RCC_OscConfig+0x34e>
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a60      	ldr	r2, [pc, #384]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a5d      	ldr	r2, [pc, #372]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x366>
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	4b58      	ldr	r3, [pc, #352]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a57      	ldr	r2, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d015      	beq.n	8001236 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff f863 	bl	80002d4 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff f85f 	bl	80002d4 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001220:	4293      	cmp	r3, r2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e093      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ee      	beq.n	8001212 <HAL_RCC_OscConfig+0x376>
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff f84d 	bl	80002d4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff f849 	bl	80002d4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e07d      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ee      	bne.n	800123e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d105      	bne.n	8001272 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a3b      	ldr	r2, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800126c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d069      	beq.n	800134e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d061      	beq.n	800134a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d146      	bne.n	800131c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff f81e 	bl	80002d4 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff f81a 	bl	80002d4 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e050      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c2:	d108      	bne.n	80012d6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a19      	ldr	r1, [r3, #32]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	430b      	orrs	r3, r1
 80012e8:	491b      	ldr	r1, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7fe ffee 	bl	80002d4 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7fe ffea 	bl	80002d4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e020      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x460>
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7fe ffd7 	bl	80002d4 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132a:	f7fe ffd3 	bl	80002d4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e009      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x48e>
 8001348:	e001      	b.n	800134e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40007000 	.word	0x40007000
 8001360:	42420060 	.word	0x42420060

08001364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001372:	4b7e      	ldr	r3, [pc, #504]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d910      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001380:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 0207 	bic.w	r2, r3, #7
 8001388:	4978      	ldr	r1, [pc, #480]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001390:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0e0      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d020      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ba:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a6c      	ldr	r2, [pc, #432]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013c0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013c4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a66      	ldr	r2, [pc, #408]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013d8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013dc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	4961      	ldr	r1, [pc, #388]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d06a      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001404:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0a7      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d107      	bne.n	800142c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e09b      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e093      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143c:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 0203 	bic.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4949      	ldr	r1, [pc, #292]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800144e:	f7fe ff41 	bl	80002d4 <HAL_GetTick>
 8001452:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d112      	bne.n	8001482 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145e:	f7fe ff39 	bl	80002d4 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	; 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e077      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d1ee      	bne.n	800145e <HAL_RCC_ClockConfig+0xfa>
 8001480:	e027      	b.n	80014d2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d11d      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7fe ff22 	bl	80002d4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e060      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d1ee      	bne.n	800148c <HAL_RCC_ClockConfig+0x128>
 80014ae:	e010      	b.n	80014d2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7fe ff10 	bl	80002d4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e04e      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d210      	bcs.n	8001502 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 0207 	bic.w	r2, r3, #7
 80014e8:	4920      	ldr	r1, [pc, #128]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_RCC_ClockConfig+0x208>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e030      	b.n	8001564 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4915      	ldr	r1, [pc, #84]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001540:	f000 f81c 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8001544:	4601      	mov	r1, r0
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x20c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_RCC_ClockConfig+0x210>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	fa21 f303 	lsr.w	r3, r1, r3
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_RCC_ClockConfig+0x214>)
 800155a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800155c:	2000      	movs	r0, #0
 800155e:	f7fe fe77 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40022000 	.word	0x40022000
 8001570:	40021000 	.word	0x40021000
 8001574:	08002aec 	.word	0x08002aec
 8001578:	20000998 	.word	0x20000998

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b490      	push	{r4, r7}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x40>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x46>
 80015ba:	e02d      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	e02d      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ce:	4413      	add	r3, r2
 80015d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c5b      	lsrs	r3, r3, #17
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ee:	4413      	add	r3, r2
 80015f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015f4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	e004      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_RCC_GetSysClockFreq+0xc0>)
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	623b      	str	r3, [r7, #32]
      break;
 8001616:	e002      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800161a:	623b      	str	r3, [r7, #32]
      break;
 800161c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161e:	6a3b      	ldr	r3, [r7, #32]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bc90      	pop	{r4, r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	08002ad8 	.word	0x08002ad8
 8001630:	08002ae8 	.word	0x08002ae8
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200
 800163c:	003d0900 	.word	0x003d0900

08001640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <RCC_Delay+0x34>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <RCC_Delay+0x38>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0a5b      	lsrs	r3, r3, #9
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800165c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	60fa      	str	r2, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f9      	bne.n	800165c <RCC_Delay+0x1c>
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000998 	.word	0x20000998
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e01d      	b.n	80016ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f001 f93a 	bl	800291c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3304      	adds	r3, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f000 fbbc 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e01d      	b.n	8001720 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f815 	bl	8001728 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f000 fb91 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	e0c6      	b.n	80018e8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10b      	bne.n	800177e <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <HAL_TIM_PWM_Start_DMA+0x3a>
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0b8      	b.n	80018e8 <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2202      	movs	r2, #2
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	f200 8089 	bhi.w	8001898 <HAL_TIM_PWM_Start_DMA+0x15c>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_TIM_PWM_Start_DMA+0x50>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001899 	.word	0x08001899
 8001794:	08001899 	.word	0x08001899
 8001798:	08001899 	.word	0x08001899
 800179c:	080017f7 	.word	0x080017f7
 80017a0:	08001899 	.word	0x08001899
 80017a4:	08001899 	.word	0x08001899
 80017a8:	08001899 	.word	0x08001899
 80017ac:	0800182d 	.word	0x0800182d
 80017b0:	08001899 	.word	0x08001899
 80017b4:	08001899 	.word	0x08001899
 80017b8:	08001899 	.word	0x08001899
 80017bc:	08001863 	.word	0x08001863
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3334      	adds	r3, #52	; 0x34
 80017dc:	461a      	mov	r2, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	f7fe ff24 	bl	800062c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	60da      	str	r2, [r3, #12]
    }
    break;
 80017f4:	e051      	b.n	800189a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8001804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3338      	adds	r3, #56	; 0x38
 8001812:	461a      	mov	r2, r3
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	f7fe ff09 	bl	800062c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001828:	60da      	str	r2, [r3, #12]
    }
    break;
 800182a:	e036      	b.n	800189a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8001832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800183a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	333c      	adds	r3, #60	; 0x3c
 8001848:	461a      	mov	r2, r3
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	f7fe feee 	bl	800062c <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185e:	60da      	str	r2, [r3, #12]
    }
    break;
 8001860:	e01b      	b.n	800189a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8001868:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8001870:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3340      	adds	r3, #64	; 0x40
 800187e:	461a      	mov	r2, r3
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	f7fe fed3 	bl	800062c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001894:	60da      	str	r2, [r3, #12]
    }
    break;
 8001896:	e000      	b.n	800189a <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 8001898:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fdaf 	bl	8002406 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <HAL_TIM_PWM_Start_DMA+0x1bc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_TIM_PWM_Start_DMA+0x180>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_TIM_PWM_Start_DMA+0x1c0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_TIM_PWM_Start_DMA+0x184>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_TIM_PWM_Start_DMA+0x186>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08001dc7 	.word	0x08001dc7
 80018f4:	08001da3 	.word	0x08001da3
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40013400 	.word	0x40013400

08001900 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d841      	bhi.n	8001994 <HAL_TIM_PWM_Stop_DMA+0x94>
 8001910:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	0800194d 	.word	0x0800194d
 800191c:	08001995 	.word	0x08001995
 8001920:	08001995 	.word	0x08001995
 8001924:	08001995 	.word	0x08001995
 8001928:	0800195f 	.word	0x0800195f
 800192c:	08001995 	.word	0x08001995
 8001930:	08001995 	.word	0x08001995
 8001934:	08001995 	.word	0x08001995
 8001938:	08001971 	.word	0x08001971
 800193c:	08001995 	.word	0x08001995
 8001940:	08001995 	.word	0x08001995
 8001944:	08001995 	.word	0x08001995
 8001948:	08001983 	.word	0x08001983
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800195a:	60da      	str	r2, [r3, #12]
    }
    break;
 800195c:	e01b      	b.n	8001996 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196c:	60da      	str	r2, [r3, #12]
    }
    break;
 800196e:	e012      	b.n	8001996 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	60da      	str	r2, [r3, #12]
    }
    break;
 8001980:	e009      	b.n	8001996 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001990:	60da      	str	r2, [r3, #12]
    }
    break;
 8001992:	e000      	b.n	8001996 <HAL_TIM_PWM_Stop_DMA+0x96>

    default:
    break;
 8001994:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd31 	bl	8002406 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_TIM_PWM_Stop_DMA+0x134>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_TIM_PWM_Stop_DMA+0xb8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_TIM_PWM_Stop_DMA+0x138>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_TIM_PWM_Stop_DMA+0xbc>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_TIM_PWM_Stop_DMA+0xbe>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_TIM_PWM_Stop_DMA+0xf2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	f240 4344 	movw	r3, #1092	; 0x444
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_TIM_PWM_Stop_DMA+0x122>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a1a      	ldr	r2, [r3, #32]
 8001a08:	f240 4344 	movw	r3, #1092	; 0x444
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_TIM_PWM_Stop_DMA+0x122>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40013400 	.word	0x40013400

08001a3c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e0b4      	b.n	8001bc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2202      	movs	r2, #2
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	f200 809f 	bhi.w	8001bac <HAL_TIM_PWM_ConfigChannel+0x170>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aa9 	.word	0x08001aa9
 8001a78:	08001bad 	.word	0x08001bad
 8001a7c:	08001bad 	.word	0x08001bad
 8001a80:	08001bad 	.word	0x08001bad
 8001a84:	08001ae9 	.word	0x08001ae9
 8001a88:	08001bad 	.word	0x08001bad
 8001a8c:	08001bad 	.word	0x08001bad
 8001a90:	08001bad 	.word	0x08001bad
 8001a94:	08001b2b 	.word	0x08001b2b
 8001a98:	08001bad 	.word	0x08001bad
 8001a9c:	08001bad 	.word	0x08001bad
 8001aa0:	08001bad 	.word	0x08001bad
 8001aa4:	08001b6b 	.word	0x08001b6b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fa40 	bl	8001f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6999      	ldr	r1, [r3, #24]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	619a      	str	r2, [r3, #24]
    }
    break;
 8001ae6:	e062      	b.n	8001bae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fa96 	bl	8002020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6999      	ldr	r1, [r3, #24]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	619a      	str	r2, [r3, #24]
    }
    break;
 8001b28:	e041      	b.n	8001bae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 faef 	bl	8002114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0208 	orr.w	r2, r2, #8
 8001b44:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0204 	bic.w	r2, r2, #4
 8001b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69d9      	ldr	r1, [r3, #28]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	61da      	str	r2, [r3, #28]
    }
    break;
 8001b68:	e021      	b.n	8001bae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fb49 	bl	8002208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b84:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69d9      	ldr	r1, [r3, #28]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	61da      	str	r2, [r3, #28]
    }
    break;
 8001baa:	e000      	b.n	8001bae <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001bac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_TIM_ConfigClockSource+0x1c>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e0c8      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d077      	beq.n	8001d0c <HAL_TIM_ConfigClockSource+0x144>
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d80e      	bhi.n	8001c3e <HAL_TIM_ConfigClockSource+0x76>
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	f000 808a 	beq.w	8001d3a <HAL_TIM_ConfigClockSource+0x172>
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d802      	bhi.n	8001c30 <HAL_TIM_ConfigClockSource+0x68>
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d07e      	beq.n	8001d2c <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001c2e:	e099      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	f000 8089 	beq.w	8001d48 <HAL_TIM_ConfigClockSource+0x180>
 8001c36:	2b30      	cmp	r3, #48	; 0x30
 8001c38:	f000 808d 	beq.w	8001d56 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001c3c:	e092      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c3e:	2b70      	cmp	r3, #112	; 0x70
 8001c40:	d016      	beq.n	8001c70 <HAL_TIM_ConfigClockSource+0xa8>
 8001c42:	2b70      	cmp	r3, #112	; 0x70
 8001c44:	d804      	bhi.n	8001c50 <HAL_TIM_ConfigClockSource+0x88>
 8001c46:	2b50      	cmp	r3, #80	; 0x50
 8001c48:	d040      	beq.n	8001ccc <HAL_TIM_ConfigClockSource+0x104>
 8001c4a:	2b60      	cmp	r3, #96	; 0x60
 8001c4c:	d04e      	beq.n	8001cec <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001c4e:	e089      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_ConfigClockSource+0x96>
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d024      	beq.n	8001ca6 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001c5c:	e082      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0207 	bic.w	r2, r2, #7
 8001c6c:	609a      	str	r2, [r3, #8]
    break;
 8001c6e:	e079      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f000 fba0 	bl	80023c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]
    break;
 8001ca4:	e05e      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f000 fb85 	bl	80023c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc8:	609a      	str	r2, [r3, #8]
    break;
 8001cca:	e04b      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f000 faef 	bl	80022bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2150      	movs	r1, #80	; 0x50
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fb4e 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001cea:	e03b      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f000 fb11 	bl	8002320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2160      	movs	r1, #96	; 0x60
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fb3e 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d0a:	e02b      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f000 facf 	bl	80022bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fb2e 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d2a:	e01b      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fb27 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d38:	e014      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2110      	movs	r1, #16
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fb20 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d46:	e00d      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fb19 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d54:	e006      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2130      	movs	r1, #48	; 0x30
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fb12 	bl	8002386 <TIM_ITRx_SetConfig>
    break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff ffe9 	bl	8001d90 <HAL_TIM_ErrorCallback>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d103      	bne.n	8001dee <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	771a      	strb	r2, [r3, #28]
 8001dec:	e019      	b.n	8001e22 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d103      	bne.n	8001e00 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	771a      	strb	r2, [r3, #28]
 8001dfe:	e010      	b.n	8001e22 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d103      	bne.n	8001e12 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	771a      	strb	r2, [r3, #28]
 8001e10:	e007      	b.n	8001e22 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d102      	bne.n	8001e22 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2208      	movs	r2, #8
 8001e20:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff ffab 	bl	8001d7e <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	771a      	strb	r2, [r3, #28]
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <TIM_Base_SetConfig+0x44>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <TIM_Base_SetConfig+0xec>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00f      	beq.n	8001e7c <TIM_Base_SetConfig+0x44>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d00b      	beq.n	8001e7c <TIM_Base_SetConfig+0x44>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <TIM_Base_SetConfig+0xf0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_Base_SetConfig+0x44>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <TIM_Base_SetConfig+0xf4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_Base_SetConfig+0x44>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <TIM_Base_SetConfig+0xf8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <TIM_Base_SetConfig+0x86>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <TIM_Base_SetConfig+0xec>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <TIM_Base_SetConfig+0x86>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0x86>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <TIM_Base_SetConfig+0xf0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0x86>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <TIM_Base_SetConfig+0xf4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0x86>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <TIM_Base_SetConfig+0xf8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed6:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0xd0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <TIM_Base_SetConfig+0xec>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d103      	bne.n	8001f10 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	615a      	str	r2, [r3, #20]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40013400 	.word	0x40013400
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40000c00 	.word	0x40000c00

08001f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f023 0201 	bic.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <TIM_OC1_SetConfig+0xe4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <TIM_OC1_SetConfig+0x70>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <TIM_OC1_SetConfig+0xe8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10c      	bne.n	8001fbe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0308 	bic.w	r3, r3, #8
 8001faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <TIM_OC1_SetConfig+0xe4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_OC1_SetConfig+0x9a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <TIM_OC1_SetConfig+0xe8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d111      	bne.n	8001ff2 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	621a      	str	r2, [r3, #32]
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40013400 	.word	0x40013400

08002020 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f023 0210 	bic.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0320 	bic.w	r3, r3, #32
 8002076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a21      	ldr	r2, [pc, #132]	; (800210c <TIM_OC2_SetConfig+0xec>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_OC2_SetConfig+0x74>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a20      	ldr	r2, [pc, #128]	; (8002110 <TIM_OC2_SetConfig+0xf0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10d      	bne.n	80020b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ae:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <TIM_OC2_SetConfig+0xec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_OC2_SetConfig+0xa0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <TIM_OC2_SetConfig+0xf0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d113      	bne.n	80020e8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40013400 	.word	0x40013400

08002114 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <TIM_OC3_SetConfig+0xec>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_OC3_SetConfig+0x72>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <TIM_OC3_SetConfig+0xf0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10d      	bne.n	80021a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800218c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <TIM_OC3_SetConfig+0xec>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_OC3_SetConfig+0x9e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a15      	ldr	r2, [pc, #84]	; (8002204 <TIM_OC3_SetConfig+0xf0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d113      	bne.n	80021da <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	621a      	str	r2, [r3, #32]
}
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40013400 	.word	0x40013400

08002208 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002242:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800225e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	031b      	lsls	r3, r3, #12
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <TIM_OC4_SetConfig+0xac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d003      	beq.n	800227c <TIM_OC4_SetConfig+0x74>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <TIM_OC4_SetConfig+0xb0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d109      	bne.n	8002290 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40013400 	.word	0x40013400

080022bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0201 	bic.w	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f023 030a 	bic.w	r3, r3, #10
 8002300:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f023 0210 	bic.w	r2, r3, #16
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	031b      	lsls	r3, r3, #12
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	f043 0307 	orr.w	r3, r3, #7
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	609a      	str	r2, [r3, #8]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002406:	b480      	push	{r7}
 8002408:	b087      	sub	sp, #28
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002416:	2201      	movs	r2, #1
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800245e:	2302      	movs	r3, #2
 8002460:	e032      	b.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002480:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6899      	ldr	r1, [r3, #8]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_DMA_Init+0x38>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <MX_DMA_Init+0x38>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6153      	str	r3, [r2, #20]
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_DMA_Init+0x38>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2010      	movs	r0, #16
 80024f8:	f7fd ffeb 	bl	80004d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024fc:	2010      	movs	r0, #16
 80024fe:	f7fe f804 	bl	800050a <HAL_NVIC_EnableIRQ>

}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_GPIO_Init+0x40>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <MX_GPIO_Init+0x40>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6193      	str	r3, [r2, #24]
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MX_GPIO_Init+0x40>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <MX_GPIO_Init+0x40>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <MX_GPIO_Init+0x40>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6193      	str	r3, [r2, #24]
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <MX_GPIO_Init+0x40>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000

08002554 <convert_color>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void convert_color(uint32_t color, uint16_t led_no){ // GRB
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
    for(int i=0; i<24; i++){
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e024      	b.n	80025b0 <convert_color+0x5c>
        if(color&(1<<(23-i))) buf[led_no*24 + i] = 57;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1c3 0317 	rsb	r3, r3, #23
 800256c:	2201      	movs	r2, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <convert_color+0x40>
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <convert_color+0x6c>)
 800258e:	2139      	movs	r1, #57	; 0x39
 8002590:	54d1      	strb	r1, [r2, r3]
 8002592:	e00a      	b.n	80025aa <convert_color+0x56>
        else                  buf[led_no*24 + i] = 28;
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <convert_color+0x6c>)
 80025a6:	211c      	movs	r1, #28
 80025a8:	54d1      	strb	r1, [r2, r3]
    for(int i=0; i<24; i++){
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b17      	cmp	r3, #23
 80025b4:	ddd7      	ble.n	8002566 <convert_color+0x12>
    }
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000008 	.word	0x20000008

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ca:	f7fd fe2b 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ce:	f000 f849 	bl	8002664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d2:	f7ff ff9d 	bl	8002510 <MX_GPIO_Init>
  MX_DMA_Init();
 80025d6:	f7ff ff7d 	bl	80024d4 <MX_DMA_Init>
  MX_TIM3_Init();
 80025da:	f000 f929 	bl	8002830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80025de:	2100      	movs	r1, #0
 80025e0:	481d      	ldr	r0, [pc, #116]	; (8002658 <main+0x94>)
 80025e2:	f7ff f98d 	bl	8001900 <HAL_TIM_PWM_Stop_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)buf, LED*24+48);
 80025e6:	f44f 6319 	mov.w	r3, #2448	; 0x990
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <main+0x98>)
 80025ec:	2100      	movs	r1, #0
 80025ee:	481a      	ldr	r0, [pc, #104]	; (8002658 <main+0x94>)
 80025f0:	f7ff f8a4 	bl	800173c <HAL_TIM_PWM_Start_DMA>
  while(hdma_tim3_ch1_trig.Instance->CNDTR > 0);
 80025f4:	bf00      	nop
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <main+0x9c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1fa      	bne.n	80025f6 <main+0x32>
  HAL_Delay(1000);
 8002600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002604:	f7fd fe70 	bl	80002e8 <HAL_Delay>

  memset(buf, 0, LED*24+48);
 8002608:	f44f 6219 	mov.w	r2, #2448	; 0x990
 800260c:	2100      	movs	r1, #0
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <main+0x98>)
 8002610:	f000 fa4e 	bl	8002ab0 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(int i=0; i<100; i++){
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	e009      	b.n	800262e <main+0x6a>
		  convert_color(0x7FFFFFFF, i);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002624:	f7ff ff96 	bl	8002554 <convert_color>
	  for(int i=0; i<100; i++){
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3301      	adds	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b63      	cmp	r3, #99	; 0x63
 8002632:	ddf2      	ble.n	800261a <main+0x56>
	  }
	  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)buf, LED*24+48);
 8002634:	f44f 6319 	mov.w	r3, #2448	; 0x990
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <main+0x98>)
 800263a:	2100      	movs	r1, #0
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <main+0x94>)
 800263e:	f7ff f87d 	bl	800173c <HAL_TIM_PWM_Start_DMA>
	  while(hdma_tim3_ch1_trig.Instance->CNDTR > 0);
 8002642:	bf00      	nop
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <main+0x9c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1fa      	bne.n	8002644 <main+0x80>
	  HAL_Delay(100);
 800264e:	2064      	movs	r0, #100	; 0x64
 8002650:	f7fd fe4a 	bl	80002e8 <HAL_Delay>
	  for(int i=0; i<100; i++){
 8002654:	e7de      	b.n	8002614 <main+0x50>
 8002656:	bf00      	nop
 8002658:	200009bc 	.word	0x200009bc
 800265c:	20000008 	.word	0x20000008
 8002660:	200009fc 	.word	0x200009fc

08002664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b090      	sub	sp, #64	; 0x40
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	f107 0318 	add.w	r3, r7, #24
 800266e:	2228      	movs	r2, #40	; 0x28
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fa1c 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002686:	2301      	movs	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800268a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002698:	2302      	movs	r3, #2
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800269c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fbf5 	bl	8000e9c <HAL_RCC_OscConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80026b8:	f000 f819 	bl	80026ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026bc:	230f      	movs	r3, #15
 80026be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fe44 	bl	8001364 <HAL_RCC_ClockConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80026e2:	f000 f804 	bl	80026ee <Error_Handler>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3740      	adds	r7, #64	; 0x40
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_MspInit+0x5c>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_MspInit+0x5c>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6193      	str	r3, [r2, #24]
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_MspInit+0x5c>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_MspInit+0x5c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_MspInit+0x5c>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_MspInit+0x5c>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_MspInit+0x60>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_MspInit+0x60>)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000

08002760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <HardFault_Handler+0x4>

08002772 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <MemManage_Handler+0x4>

08002778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <BusFault_Handler+0x4>

0800277e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <UsageFault_Handler+0x4>

08002784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ac:	f7fd fd80 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <DMA1_Channel6_IRQHandler+0x10>)
 80027ba:	f7fd ff97 	bl	80006ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200009fc 	.word	0x200009fc

080027c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <SystemInit+0x5c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <SystemInit+0x5c>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SystemInit+0x5c>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4911      	ldr	r1, [pc, #68]	; (8002824 <SystemInit+0x5c>)
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <SystemInit+0x60>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <SystemInit+0x5c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <SystemInit+0x5c>)
 80027ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <SystemInit+0x5c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SystemInit+0x5c>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <SystemInit+0x5c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <SystemInit+0x5c>)
 8002806:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800280a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SystemInit+0x5c>)
 800280e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002812:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SystemInit+0x64>)
 8002816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281a:	609a      	str	r2, [r3, #8]
#endif 
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	f8ff0000 	.word	0xf8ff0000
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	; 0x38
 8002834:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
 800285c:	615a      	str	r2, [r3, #20]
 800285e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002862:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <MX_TIM3_Init+0xe8>)
 8002864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_TIM3_Init+0xe4>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002874:	2259      	movs	r2, #89	; 0x59
 8002876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <MX_TIM3_Init+0xe4>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002884:	4823      	ldr	r0, [pc, #140]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002886:	f7fe fef9 	bl	800167c <HAL_TIM_Base_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002890:	f7ff ff2d 	bl	80026ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800289a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289e:	4619      	mov	r1, r3
 80028a0:	481c      	ldr	r0, [pc, #112]	; (8002914 <MX_TIM3_Init+0xe4>)
 80028a2:	f7ff f991 	bl	8001bc8 <HAL_TIM_ConfigClockSource>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80028ac:	f7ff ff1f 	bl	80026ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028b0:	4818      	ldr	r0, [pc, #96]	; (8002914 <MX_TIM3_Init+0xe4>)
 80028b2:	f7fe ff0e 	bl	80016d2 <HAL_TIM_PWM_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80028bc:	f7ff ff17 	bl	80026ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028c8:	f107 0320 	add.w	r3, r7, #32
 80028cc:	4619      	mov	r1, r3
 80028ce:	4811      	ldr	r0, [pc, #68]	; (8002914 <MX_TIM3_Init+0xe4>)
 80028d0:	f7ff fdbb 	bl	800244a <HAL_TIMEx_MasterConfigSynchronization>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80028da:	f7ff ff08 	bl	80026ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028de:	2360      	movs	r3, #96	; 0x60
 80028e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2200      	movs	r2, #0
 80028f2:	4619      	mov	r1, r3
 80028f4:	4807      	ldr	r0, [pc, #28]	; (8002914 <MX_TIM3_Init+0xe4>)
 80028f6:	f7ff f8a1 	bl	8001a3c <HAL_TIM_PWM_ConfigChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002900:	f7ff fef5 	bl	80026ee <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <MX_TIM3_Init+0xe4>)
 8002906:	f000 f857 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 800290a:	bf00      	nop
 800290c:	3738      	adds	r7, #56	; 0x38
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200009bc 	.word	0x200009bc
 8002918:	40000400 	.word	0x40000400

0800291c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_TIM_Base_MspInit+0x8c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d138      	bne.n	80029a0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_TIM_Base_MspInit+0x90>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_TIM_Base_MspInit+0x90>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_TIM_Base_MspInit+0x90>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002948:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 800294a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800294e:	2210      	movs	r2, #16
 8002950:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002964:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800297a:	f7fd fde1 	bl	8000540 <HAL_DMA_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8002984:	f7ff feb3 	bl	80026ee <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <HAL_TIM_Base_MspInit+0x94>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40021000 	.word	0x40021000
 80029b0:	200009fc 	.word	0x200009fc
 80029b4:	4002006c 	.word	0x4002006c

080029b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_TIM_MspPostInit+0x58>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d117      	bne.n	8002a08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_TIM_MspPostInit+0x60>)
 8002a04:	f7fe f8dc 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800

08002a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a1e:	e003      	b.n	8002a28 <LoopCopyDataInit>

08002a20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a26:	3104      	adds	r1, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a28:	480a      	ldr	r0, [pc, #40]	; (8002a54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a30:	d3f6      	bcc.n	8002a20 <CopyDataInit>
  ldr r2, =_sbss
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a34:	e002      	b.n	8002a3c <LoopFillZerobss>

08002a36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a38:	f842 3b04 	str.w	r3, [r2], #4

08002a3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a40:	d3f9      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a42:	f7ff fec1 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f000 f80f 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4a:	f7ff fdbb 	bl	80025c4 <main>
  bx lr
 8002a4e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a50:	08002b04 	.word	0x08002b04
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a58:	2000099c 	.word	0x2000099c
  ldr r2, =_sbss
 8002a5c:	2000099c 	.word	0x2000099c
  ldr r3, = _ebss
 8002a60:	20000a40 	.word	0x20000a40

08002a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_2_IRQHandler>
	...

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	4e0c      	ldr	r6, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1ba4      	subs	r4, r4, r6
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a5      	cmp	r5, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	f000 f822 	bl	8002ac0 <_init>
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	4e0a      	ldr	r6, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1ba4      	subs	r4, r4, r6
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a5      	cmp	r5, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a90:	4798      	blx	r3
 8002a92:	3501      	adds	r5, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9a:	4798      	blx	r3
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002afc 	.word	0x08002afc
 8002aa4:	08002afc 	.word	0x08002afc
 8002aa8:	08002afc 	.word	0x08002afc
 8002aac:	08002b00 	.word	0x08002b00

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
